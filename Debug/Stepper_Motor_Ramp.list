
Stepper_Motor_Ramp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ad4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004c5c  08004c5c  00014c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ca4  08004ca4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ca4  08004ca4  00014ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cac  08004cac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cac  08004cac  00014cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cb0  08004cb0  00014cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000000c  08004cc0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08004cc0  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010542  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fd6  00000000  00000000  0003057e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ed8  00000000  00000000  00032558  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc0  00000000  00000000  00033430  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027327  00000000  00000000  000341f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cb17  00000000  00000000  0005b517  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f34fd  00000000  00000000  0006802e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015b52b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d7c  00000000  00000000  0015b5a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c44 	.word	0x08004c44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004c44 	.word	0x08004c44

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	; 0x28
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 0314 	add.w	r3, r7, #20
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004de:	4b2c      	ldr	r3, [pc, #176]	; (8000590 <MX_GPIO_Init+0xc8>)
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	4a2b      	ldr	r2, [pc, #172]	; (8000590 <MX_GPIO_Init+0xc8>)
 80004e4:	f043 0304 	orr.w	r3, r3, #4
 80004e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ea:	4b29      	ldr	r3, [pc, #164]	; (8000590 <MX_GPIO_Init+0xc8>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ee:	f003 0304 	and.w	r3, r3, #4
 80004f2:	613b      	str	r3, [r7, #16]
 80004f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f6:	4b26      	ldr	r3, [pc, #152]	; (8000590 <MX_GPIO_Init+0xc8>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fa:	4a25      	ldr	r2, [pc, #148]	; (8000590 <MX_GPIO_Init+0xc8>)
 80004fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000502:	4b23      	ldr	r3, [pc, #140]	; (8000590 <MX_GPIO_Init+0xc8>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	4b20      	ldr	r3, [pc, #128]	; (8000590 <MX_GPIO_Init+0xc8>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000512:	4a1f      	ldr	r2, [pc, #124]	; (8000590 <MX_GPIO_Init+0xc8>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051a:	4b1d      	ldr	r3, [pc, #116]	; (8000590 <MX_GPIO_Init+0xc8>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000526:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <MX_GPIO_Init+0xc8>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052a:	4a19      	ldr	r2, [pc, #100]	; (8000590 <MX_GPIO_Init+0xc8>)
 800052c:	f043 0302 	orr.w	r3, r3, #2
 8000530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000532:	4b17      	ldr	r3, [pc, #92]	; (8000590 <MX_GPIO_Init+0xc8>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000536:	f003 0302 	and.w	r3, r3, #2
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIR_Pin, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000548:	f001 f994 	bl	8001874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800054c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000552:	4b10      	ldr	r3, [pc, #64]	; (8000594 <MX_GPIO_Init+0xcc>)
 8000554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2300      	movs	r3, #0
 8000558:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800055a:	f107 0314 	add.w	r3, r7, #20
 800055e:	4619      	mov	r1, r3
 8000560:	480d      	ldr	r0, [pc, #52]	; (8000598 <MX_GPIO_Init+0xd0>)
 8000562:	f000 ffc7 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|DIR_Pin;
 8000566:	f44f 7390 	mov.w	r3, #288	; 0x120
 800056a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056c:	2301      	movs	r3, #1
 800056e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000574:	2300      	movs	r3, #0
 8000576:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	4619      	mov	r1, r3
 800057e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000582:	f000 ffb7 	bl	80014f4 <HAL_GPIO_Init>

}
 8000586:	bf00      	nop
 8000588:	3728      	adds	r7, #40	; 0x28
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40021000 	.word	0x40021000
 8000594:	10210000 	.word	0x10210000
 8000598:	48000800 	.word	0x48000800

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fdf7 	bl	8001194 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f837 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f7ff ff8d 	bl	80004c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ae:	f000 fd55 	bl	800105c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80005b2:	f000 fc23 	bl	8000dfc <MX_TIM1_Init>
  MX_TIM2_Init();
 80005b6:	f000 fc77 	bl	8000ea8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  direction dir = CW;
 80005ba:	2301      	movs	r3, #1
 80005bc:	71fb      	strb	r3, [r7, #7]

  HAL_Delay(3000);
 80005be:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005c2:	f000 fe63 	bl	800128c <HAL_Delay>

  stepper_init(&stepper, &htim2, TIM_CHANNEL_3);
 80005c6:	2208      	movs	r2, #8
 80005c8:	4910      	ldr	r1, [pc, #64]	; (800060c <main+0x70>)
 80005ca:	4811      	ldr	r0, [pc, #68]	; (8000610 <main+0x74>)
 80005cc:	f000 f8c4 	bl	8000758 <stepper_init>
  stepper_set_ramp_profile(&stepper, LINEAR_SPEED, 100, 20, 100);
 80005d0:	2364      	movs	r3, #100	; 0x64
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2314      	movs	r3, #20
 80005d6:	2264      	movs	r2, #100	; 0x64
 80005d8:	2101      	movs	r1, #1
 80005da:	480d      	ldr	r0, [pc, #52]	; (8000610 <main+0x74>)
 80005dc:	f000 f8d1 	bl	8000782 <stepper_set_ramp_profile>
  stepper_set_angle(&stepper, dir, 2*360);
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 80005e6:	4619      	mov	r1, r3
 80005e8:	4809      	ldr	r0, [pc, #36]	; (8000610 <main+0x74>)
 80005ea:	f000 f8e7 	bl	80007bc <stepper_set_angle>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  stepper_ramp_process(&stepper);
 80005ee:	4808      	ldr	r0, [pc, #32]	; (8000610 <main+0x74>)
 80005f0:	f000 faaa 	bl	8000b48 <stepper_ramp_process>

	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0)
 80005f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f8:	4806      	ldr	r0, [pc, #24]	; (8000614 <main+0x78>)
 80005fa:	f001 f923 	bl	8001844 <HAL_GPIO_ReadPin>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d1f4      	bne.n	80005ee <main+0x52>
		  stepper_stop_with_profile(&stepper);
 8000604:	4802      	ldr	r0, [pc, #8]	; (8000610 <main+0x74>)
 8000606:	f000 f95c 	bl	80008c2 <stepper_stop_with_profile>
	  stepper_ramp_process(&stepper);
 800060a:	e7f0      	b.n	80005ee <main+0x52>
 800060c:	200000ac 	.word	0x200000ac
 8000610:	20000028 	.word	0x20000028
 8000614:	48000800 	.word	0x48000800

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b0b8      	sub	sp, #224	; 0xe0
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000622:	2244      	movs	r2, #68	; 0x44
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f004 fb04 	bl	8004c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800063c:	463b      	mov	r3, r7
 800063e:	2288      	movs	r2, #136	; 0x88
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f004 faf6 	bl	8004c34 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000652:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000656:	2310      	movs	r3, #16
 8000658:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000662:	2302      	movs	r3, #2
 8000664:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000668:	2301      	movs	r3, #1
 800066a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800066e:	230a      	movs	r3, #10
 8000670:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000674:	2307      	movs	r3, #7
 8000676:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067a:	2302      	movs	r3, #2
 800067c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800068a:	4618      	mov	r0, r3
 800068c:	f001 f96e 	bl	800196c <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000696:	f000 f85b 	bl	8000750 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2303      	movs	r3, #3
 80006a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006bc:	2104      	movs	r1, #4
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 fd3a 	bl	8002138 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006ca:	f000 f841 	bl	8000750 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d6:	463b      	mov	r3, r7
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 ff31 	bl	8002540 <HAL_RCCEx_PeriphCLKConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006e4:	f000 f834 	bl	8000750 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ec:	f001 f8e8 	bl	80018c0 <HAL_PWREx_ControlVoltageScaling>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80006f6:	f000 f82b 	bl	8000750 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	37e0      	adds	r7, #224	; 0xe0
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == stepper.timer.htim->Instance)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	429a      	cmp	r2, r3
 8000718:	d113      	bne.n	8000742 <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
	{
		stepper.ustep_counter++;
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 800071c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800071e:	3301      	adds	r3, #1
 8000720:	4a0a      	ldr	r2, [pc, #40]	; (800074c <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8000722:	6253      	str	r3, [r2, #36]	; 0x24

		if(angle == stepper.mode)
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8000726:	f893 3020 	ldrb.w	r3, [r3, #32]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d109      	bne.n	8000742 <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
		{
			if(stepper.ustep_counter >= stepper.usteps_to_count)
 800072e:	4b07      	ldr	r3, [pc, #28]	; (800074c <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8000730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8000734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000736:	429a      	cmp	r2, r3
 8000738:	d303      	bcc.n	8000742 <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
			{
				stepper_set_speed(&stepper, 0);
 800073a:	2100      	movs	r1, #0
 800073c:	4803      	ldr	r0, [pc, #12]	; (800074c <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 800073e:	f000 f8f1 	bl	8000924 <stepper_set_speed>
			}
		}
	}
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000028 	.word	0x20000028

08000750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000754:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000756:	e7fe      	b.n	8000756 <Error_Handler+0x6>

08000758 <stepper_init>:
#include <math.h>

#include "main.h"

void stepper_init(struct stepper_s *_stepper, TIM_HandleTypeDef *_htim, uint32_t _channel)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
	_stepper->timer.htim = _htim;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	68ba      	ldr	r2, [r7, #8]
 8000768:	601a      	str	r2, [r3, #0]
	_stepper->timer.channel = _channel;
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	605a      	str	r2, [r3, #4]

	_stepper->target_speed_achieved = 0;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	2200      	movs	r2, #0
 8000774:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000776:	bf00      	nop
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <stepper_set_ramp_profile>:

void stepper_set_ramp_profile(struct stepper_s *_stepper, profile_mode _mode, uint32_t _target_speed, uint32_t _accel, uint32_t _decel)
{
 8000782:	b480      	push	{r7}
 8000784:	b085      	sub	sp, #20
 8000786:	af00      	add	r7, sp, #0
 8000788:	60f8      	str	r0, [r7, #12]
 800078a:	60b9      	str	r1, [r7, #8]
 800078c:	607a      	str	r2, [r7, #4]
 800078e:	603b      	str	r3, [r7, #0]
	_stepper->profile.mode = _mode;
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	68ba      	ldr	r2, [r7, #8]
 8000794:	609a      	str	r2, [r3, #8]
	_stepper->profile.target_speed = _target_speed * MICRO_STEP;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	015a      	lsls	r2, r3, #5
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	60da      	str	r2, [r3, #12]
	_stepper->profile.accel = _accel * MICRO_STEP;
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	015a      	lsls	r2, r3, #5
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	611a      	str	r2, [r3, #16]
	_stepper->profile.decel = _decel * MICRO_STEP;
 80007a6:	69bb      	ldr	r3, [r7, #24]
 80007a8:	015a      	lsls	r2, r3, #5
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	615a      	str	r2, [r3, #20]
}
 80007ae:	bf00      	nop
 80007b0:	3714      	adds	r7, #20
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
	...

080007bc <stepper_set_angle>:

	HAL_TIM_PWM_Start_IT(_stepper->timer.htim, _stepper->timer.channel);
}

void stepper_set_angle(struct stepper_s *_stepper, direction _dir, uint32_t _angle)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	460b      	mov	r3, r1
 80007c6:	607a      	str	r2, [r7, #4]
 80007c8:	72fb      	strb	r3, [r7, #11]
	_stepper->mode = angle;
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	2201      	movs	r2, #1
 80007ce:	f883 2020 	strb.w	r2, [r3, #32]

	_stepper->ustep_counter = 0;
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	2200      	movs	r2, #0
 80007d6:	625a      	str	r2, [r3, #36]	; 0x24
	_stepper->usteps_to_count = _angle * (STEP_PER_REVOLUTION * MICRO_STEP) / 360;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80007de:	fb02 f303 	mul.w	r3, r2, r3
 80007e2:	08db      	lsrs	r3, r3, #3
 80007e4:	4a10      	ldr	r2, [pc, #64]	; (8000828 <stepper_set_angle+0x6c>)
 80007e6:	fba2 2303 	umull	r2, r3, r2, r3
 80007ea:	089a      	lsrs	r2, r3, #2
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	629a      	str	r2, [r3, #40]	; 0x28

	if(0 == _stepper->usteps_to_count)
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d103      	bne.n	8000800 <stepper_set_angle+0x44>
	{
		stepper_imediate_stop(_stepper);
 80007f8:	68f8      	ldr	r0, [r7, #12]
 80007fa:	f000 f817 	bl	800082c <stepper_imediate_stop>
		return;
 80007fe:	e00f      	b.n	8000820 <stepper_set_angle+0x64>
	}

	stepper_set_direction(_stepper, _dir);
 8000800:	7afb      	ldrb	r3, [r7, #11]
 8000802:	4619      	mov	r1, r3
 8000804:	68f8      	ldr	r0, [r7, #12]
 8000806:	f000 f86d 	bl	80008e4 <stepper_set_direction>
	stepper_ramp_init(_stepper);
 800080a:	68f8      	ldr	r0, [r7, #12]
 800080c:	f000 f910 	bl	8000a30 <stepper_ramp_init>

	HAL_TIM_PWM_Start_IT(_stepper->timer.htim, _stepper->timer.channel);
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	4619      	mov	r1, r3
 800081a:	4610      	mov	r0, r2
 800081c:	f002 fc84 	bl	8003128 <HAL_TIM_PWM_Start_IT>
}
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	16c16c17 	.word	0x16c16c17

0800082c <stepper_imediate_stop>:

void stepper_imediate_stop(struct stepper_s *_stepper)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	_stepper->mode = idle;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2200      	movs	r2, #0
 8000838:	f883 2020 	strb.w	r2, [r3, #32]

	__HAL_TIM_SET_COMPARE(_stepper->timer.htim, _stepper->timer.channel, 0);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d105      	bne.n	8000850 <stepper_imediate_stop+0x24>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2200      	movs	r2, #0
 800084c:	635a      	str	r2, [r3, #52]	; 0x34
 800084e:	e02c      	b.n	80008aa <stepper_imediate_stop+0x7e>
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	2b04      	cmp	r3, #4
 8000856:	d105      	bne.n	8000864 <stepper_imediate_stop+0x38>
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2200      	movs	r2, #0
 8000860:	639a      	str	r2, [r3, #56]	; 0x38
 8000862:	e022      	b.n	80008aa <stepper_imediate_stop+0x7e>
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	2b08      	cmp	r3, #8
 800086a:	d105      	bne.n	8000878 <stepper_imediate_stop+0x4c>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2200      	movs	r2, #0
 8000874:	63da      	str	r2, [r3, #60]	; 0x3c
 8000876:	e018      	b.n	80008aa <stepper_imediate_stop+0x7e>
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	2b0c      	cmp	r3, #12
 800087e:	d105      	bne.n	800088c <stepper_imediate_stop+0x60>
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2200      	movs	r2, #0
 8000888:	641a      	str	r2, [r3, #64]	; 0x40
 800088a:	e00e      	b.n	80008aa <stepper_imediate_stop+0x7e>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	2b10      	cmp	r3, #16
 8000892:	d105      	bne.n	80008a0 <stepper_imediate_stop+0x74>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2200      	movs	r2, #0
 800089c:	659a      	str	r2, [r3, #88]	; 0x58
 800089e:	e004      	b.n	80008aa <stepper_imediate_stop+0x7e>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2200      	movs	r2, #0
 80008a8:	65da      	str	r2, [r3, #92]	; 0x5c
	HAL_TIM_PWM_Stop(_stepper->timer.htim, _stepper->timer.channel);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	4619      	mov	r1, r3
 80008b4:	4610      	mov	r0, r2
 80008b6:	f002 fba1 	bl	8002ffc <HAL_TIM_PWM_Stop>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <stepper_stop_with_profile>:

void stepper_stop_with_profile(struct stepper_s *_stepper)
{
 80008c2:	b480      	push	{r7}
 80008c4:	b083      	sub	sp, #12
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
	_stepper->mode = stop;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2203      	movs	r2, #3
 80008ce:	f883 2020 	strb.w	r2, [r3, #32]
	_stepper->ustep_counter = 0;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2200      	movs	r2, #0
 80008d6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <stepper_set_direction>:

void stepper_set_direction(struct stepper_s *_stepper, direction _dir)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	460b      	mov	r3, r1
 80008ee:	70fb      	strb	r3, [r7, #3]
	if(_dir == CCW)
 80008f0:	78fb      	ldrb	r3, [r7, #3]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d107      	bne.n	8000906 <stepper_set_direction+0x22>
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, CCW);
 80008f6:	2200      	movs	r2, #0
 80008f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000900:	f000 ffb8 	bl	8001874 <HAL_GPIO_WritePin>
	else if(_dir == CW)
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, CW);
}
 8000904:	e009      	b.n	800091a <stepper_set_direction+0x36>
	else if(_dir == CW)
 8000906:	78fb      	ldrb	r3, [r7, #3]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d106      	bne.n	800091a <stepper_set_direction+0x36>
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, CW);
 800090c:	2201      	movs	r2, #1
 800090e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000916:	f000 ffad 	bl	8001874 <HAL_GPIO_WritePin>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <stepper_set_speed>:

void stepper_set_speed(struct stepper_s *_stepper, uint32_t _speed)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
	uint32_t counter, freq;

	_stepper->actual_speed = _speed;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	683a      	ldr	r2, [r7, #0]
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c

	if(_speed > STEPPER_MOTOR_MAX_SPEED_USTEP_PER_SEC)
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800093a:	d903      	bls.n	8000944 <stepper_set_speed+0x20>
	{
		_speed = STEPPER_MOTOR_MAX_SPEED_USTEP_PER_SEC;
 800093c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	e006      	b.n	8000952 <stepper_set_speed+0x2e>
	}
	else if(_speed == 0)
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d103      	bne.n	8000952 <stepper_set_speed+0x2e>
	{
		stepper_imediate_stop(_stepper);
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff ff6e 	bl	800082c <stepper_imediate_stop>
		return;
 8000950:	e068      	b.n	8000a24 <stepper_set_speed+0x100>
	}

	freq = (_speed * (STEPPER_MOTOR_MAX_FREQ_HZ - STEPPER_MOTOR_MIN_FREQ_HZ))/STEPPER_MOTOR_MAX_SPEED_USTEP_PER_SEC;
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000958:	fb02 f303 	mul.w	r3, r2, r3
 800095c:	4a33      	ldr	r2, [pc, #204]	; (8000a2c <stepper_set_speed+0x108>)
 800095e:	fba2 2303 	umull	r2, r3, r2, r3
 8000962:	0adb      	lsrs	r3, r3, #11
 8000964:	60fb      	str	r3, [r7, #12]
	counter = HAL_RCC_GetPCLK1Freq() / (_stepper->timer.htim->Init.Prescaler * freq);
 8000966:	f001 fd5f 	bl	8002428 <HAL_RCC_GetPCLK1Freq>
 800096a:	4601      	mov	r1, r0
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	fb02 f303 	mul.w	r3, r2, r3
 8000978:	fbb1 f3f3 	udiv	r3, r1, r3
 800097c:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_COUNTER(_stepper->timer.htim, 0);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2200      	movs	r2, #0
 8000986:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(_stepper->timer.htim, counter - 1);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	3a01      	subs	r2, #1
 8000992:	62da      	str	r2, [r3, #44]	; 0x2c
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	68ba      	ldr	r2, [r7, #8]
 800099a:	3a01      	subs	r2, #1
 800099c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(_stepper->timer.htim, _stepper->timer.channel, (counter/2) - 1);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d107      	bne.n	80009b6 <stepper_set_speed+0x92>
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	085a      	lsrs	r2, r3, #1
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	3a01      	subs	r2, #1
 80009b2:	635a      	str	r2, [r3, #52]	; 0x34
 80009b4:	e036      	b.n	8000a24 <stepper_set_speed+0x100>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	2b04      	cmp	r3, #4
 80009bc:	d107      	bne.n	80009ce <stepper_set_speed+0xaa>
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	085a      	lsrs	r2, r3, #1
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	3a01      	subs	r2, #1
 80009ca:	639a      	str	r2, [r3, #56]	; 0x38
 80009cc:	e02a      	b.n	8000a24 <stepper_set_speed+0x100>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	2b08      	cmp	r3, #8
 80009d4:	d107      	bne.n	80009e6 <stepper_set_speed+0xc2>
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	085a      	lsrs	r2, r3, #1
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	3a01      	subs	r2, #1
 80009e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80009e4:	e01e      	b.n	8000a24 <stepper_set_speed+0x100>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	2b0c      	cmp	r3, #12
 80009ec:	d107      	bne.n	80009fe <stepper_set_speed+0xda>
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	085a      	lsrs	r2, r3, #1
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	3a01      	subs	r2, #1
 80009fa:	641a      	str	r2, [r3, #64]	; 0x40
 80009fc:	e012      	b.n	8000a24 <stepper_set_speed+0x100>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	2b10      	cmp	r3, #16
 8000a04:	d107      	bne.n	8000a16 <stepper_set_speed+0xf2>
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	085a      	lsrs	r2, r3, #1
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	3a01      	subs	r2, #1
 8000a12:	659a      	str	r2, [r3, #88]	; 0x58
 8000a14:	e006      	b.n	8000a24 <stepper_set_speed+0x100>
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	085a      	lsrs	r2, r3, #1
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	3a01      	subs	r2, #1
 8000a22:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	10624dd3 	.word	0x10624dd3

08000a30 <stepper_ramp_init>:

void stepper_ramp_init(struct stepper_s *_stepper)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	switch (_stepper->profile.mode)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d002      	beq.n	8000a46 <stepper_ramp_init+0x16>
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d007      	beq.n	8000a54 <stepper_ramp_init+0x24>
		{
			stepper_ramp_init_linear_mode(_stepper);
			break;
		}
		default:
			break;
 8000a44:	e00a      	b.n	8000a5c <stepper_ramp_init+0x2c>
			stepper_set_speed(_stepper, _stepper->profile.target_speed);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff ff69 	bl	8000924 <stepper_set_speed>
			break;
 8000a52:	e003      	b.n	8000a5c <stepper_ramp_init+0x2c>
			stepper_ramp_init_linear_mode(_stepper);
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f000 f805 	bl	8000a64 <stepper_ramp_init_linear_mode>
			break;
 8000a5a:	bf00      	nop
	}
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <stepper_ramp_init_linear_mode>:

void stepper_ramp_init_linear_mode(struct stepper_s *_stepper)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	stepper_set_speed(_stepper, _stepper->profile.accel/STEPPER_MOTOR_TASK_FREQUENCY);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	691b      	ldr	r3, [r3, #16]
 8000a70:	4a34      	ldr	r2, [pc, #208]	; (8000b44 <stepper_ramp_init_linear_mode+0xe0>)
 8000a72:	fba2 2303 	umull	r2, r3, r2, r3
 8000a76:	095b      	lsrs	r3, r3, #5
 8000a78:	4619      	mov	r1, r3
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff ff52 	bl	8000924 <stepper_set_speed>

	if(continous == _stepper->mode)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d11a      	bne.n	8000ac0 <stepper_ramp_init_linear_mode+0x5c>
	{
		_stepper->ramp.usteps_to_full_speed = (_stepper->profile.target_speed * _stepper->profile.target_speed) / (2 *_stepper->profile.accel);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	68db      	ldr	r3, [r3, #12]
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	68d2      	ldr	r2, [r2, #12]
 8000a92:	fb02 f203 	mul.w	r2, r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	691b      	ldr	r3, [r3, #16]
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	619a      	str	r2, [r3, #24]
		_stepper->ramp.usteps_to_stop = (_stepper->profile.target_speed * _stepper->profile.target_speed) / (2 *_stepper->profile.decel);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	68d2      	ldr	r2, [r2, #12]
 8000aac:	fb02 f203 	mul.w	r2, r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	695b      	ldr	r3, [r3, #20]
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	fbb2 f2f3 	udiv	r2, r2, r3
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	61da      	str	r2, [r3, #28]
		{
			_stepper->ramp.usteps_to_full_speed = (_stepper->usteps_to_count * _stepper->profile.decel) / (_stepper->profile.accel + _stepper->profile.decel);
			_stepper->ramp.usteps_to_stop = _stepper->usteps_to_count - _stepper->ramp.usteps_to_full_speed;
		}
	}
}
 8000abe:	e03d      	b.n	8000b3c <stepper_ramp_init_linear_mode+0xd8>
	else if(angle == _stepper->mode)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d138      	bne.n	8000b3c <stepper_ramp_init_linear_mode+0xd8>
		_stepper->ramp.usteps_to_full_speed = (_stepper->profile.target_speed * _stepper->profile.target_speed) / (2 *_stepper->profile.accel);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	68d2      	ldr	r2, [r2, #12]
 8000ad2:	fb02 f203 	mul.w	r2, r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	691b      	ldr	r3, [r3, #16]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	619a      	str	r2, [r3, #24]
		_stepper->ramp.usteps_to_stop = (_stepper->profile.target_speed * _stepper->profile.target_speed) / (2 *_stepper->profile.decel);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	68d2      	ldr	r2, [r2, #12]
 8000aec:	fb02 f203 	mul.w	r2, r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	695b      	ldr	r3, [r3, #20]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	fbb2 f2f3 	udiv	r2, r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	61da      	str	r2, [r3, #28]
		if(_stepper->usteps_to_count < (_stepper->ramp.usteps_to_full_speed + _stepper->ramp.usteps_to_stop))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6999      	ldr	r1, [r3, #24]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	440b      	add	r3, r1
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d215      	bcs.n	8000b3c <stepper_ramp_init_linear_mode+0xd8>
			_stepper->ramp.usteps_to_full_speed = (_stepper->usteps_to_count * _stepper->profile.decel) / (_stepper->profile.accel + _stepper->profile.decel);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	6952      	ldr	r2, [r2, #20]
 8000b18:	fb02 f203 	mul.w	r2, r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6919      	ldr	r1, [r3, #16]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	695b      	ldr	r3, [r3, #20]
 8000b24:	440b      	add	r3, r1
 8000b26:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	619a      	str	r2, [r3, #24]
			_stepper->ramp.usteps_to_stop = _stepper->usteps_to_count - _stepper->ramp.usteps_to_full_speed;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	1ad2      	subs	r2, r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	61da      	str	r2, [r3, #28]
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	51eb851f 	.word	0x51eb851f

08000b48 <stepper_ramp_process>:

void stepper_ramp_process(struct stepper_s *_stepper)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	static uint32_t time_ms = 0;

	if(0 == time_ms)
 8000b50:	4b16      	ldr	r3, [pc, #88]	; (8000bac <stepper_ramp_process+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d104      	bne.n	8000b62 <stepper_ramp_process+0x1a>
		time_ms = HAL_GetTick();
 8000b58:	f000 fb8c 	bl	8001274 <HAL_GetTick>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <stepper_ramp_process+0x64>)
 8000b60:	601a      	str	r2, [r3, #0]

	if((HAL_GetTick() - time_ms) < STEPPER_MOTOR_TASK_PERIOD)
 8000b62:	f000 fb87 	bl	8001274 <HAL_GetTick>
 8000b66:	4602      	mov	r2, r0
 8000b68:	4b10      	ldr	r3, [pc, #64]	; (8000bac <stepper_ramp_process+0x64>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	2b09      	cmp	r3, #9
 8000b70:	d914      	bls.n	8000b9c <stepper_ramp_process+0x54>
		return;

	time_ms = HAL_GetTick();
 8000b72:	f000 fb7f 	bl	8001274 <HAL_GetTick>
 8000b76:	4602      	mov	r2, r0
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <stepper_ramp_process+0x64>)
 8000b7a:	601a      	str	r2, [r3, #0]

	if(idle == _stepper->mode)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d00c      	beq.n	8000ba0 <stepper_ramp_process+0x58>
		return;

	switch (_stepper->profile.mode)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d00a      	beq.n	8000ba4 <stepper_ramp_process+0x5c>
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d000      	beq.n	8000b94 <stepper_ramp_process+0x4c>
		{
			stepper_ramp_process_linear_mode(_stepper);
			break;
		}
		default:
			break;
 8000b92:	e008      	b.n	8000ba6 <stepper_ramp_process+0x5e>
			stepper_ramp_process_linear_mode(_stepper);
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f000 f80b 	bl	8000bb0 <stepper_ramp_process_linear_mode>
			break;
 8000b9a:	e004      	b.n	8000ba6 <stepper_ramp_process+0x5e>
		return;
 8000b9c:	bf00      	nop
 8000b9e:	e002      	b.n	8000ba6 <stepper_ramp_process+0x5e>
		return;
 8000ba0:	bf00      	nop
 8000ba2:	e000      	b.n	8000ba6 <stepper_ramp_process+0x5e>
			break;
 8000ba4:	bf00      	nop

	}
}
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	2000005c 	.word	0x2000005c

08000bb0 <stepper_ramp_process_linear_mode>:

void stepper_ramp_process_linear_mode(struct stepper_s *_stepper)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	uint32_t speed = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]

	if(continous == _stepper->mode)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d11f      	bne.n	8000c06 <stepper_ramp_process_linear_mode+0x56>
	{
		if(_stepper->ustep_counter < _stepper->ramp.usteps_to_full_speed && _stepper->target_speed_achieved != 1)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d20e      	bcs.n	8000bf0 <stepper_ramp_process_linear_mode+0x40>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d00a      	beq.n	8000bf0 <stepper_ramp_process_linear_mode+0x40>
		{
			speed = _stepper->actual_speed + (_stepper->profile.accel / STEPPER_MOTOR_TASK_FREQUENCY);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	691b      	ldr	r3, [r3, #16]
 8000be2:	4939      	ldr	r1, [pc, #228]	; (8000cc8 <stepper_ramp_process_linear_mode+0x118>)
 8000be4:	fba1 1303 	umull	r1, r3, r1, r3
 8000be8:	095b      	lsrs	r3, r3, #5
 8000bea:	4413      	add	r3, r2
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	e005      	b.n	8000bfc <stepper_ramp_process_linear_mode+0x4c>
		}
		else
		{
			_stepper->target_speed_achieved = 1;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	631a      	str	r2, [r3, #48]	; 0x30
			speed = _stepper->profile.target_speed;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	60fb      	str	r3, [r7, #12]
		}

		stepper_set_speed(_stepper, speed);
 8000bfc:	68f9      	ldr	r1, [r7, #12]
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff fe90 	bl	8000924 <stepper_set_speed>
		else
		{
			stepper_imediate_stop(_stepper);
		}
	}
}
 8000c04:	e05b      	b.n	8000cbe <stepper_ramp_process_linear_mode+0x10e>
	else if(angle == _stepper->mode)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d133      	bne.n	8000c78 <stepper_ramp_process_linear_mode+0xc8>
		if(_stepper->ustep_counter < _stepper->ramp.usteps_to_full_speed)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d20a      	bcs.n	8000c32 <stepper_ramp_process_linear_mode+0x82>
			speed = _stepper->actual_speed + (_stepper->profile.accel / STEPPER_MOTOR_TASK_FREQUENCY);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	691b      	ldr	r3, [r3, #16]
 8000c24:	4928      	ldr	r1, [pc, #160]	; (8000cc8 <stepper_ramp_process_linear_mode+0x118>)
 8000c26:	fba1 1303 	umull	r1, r3, r1, r3
 8000c2a:	095b      	lsrs	r3, r3, #5
 8000c2c:	4413      	add	r3, r2
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	e01d      	b.n	8000c6e <stepper_ramp_process_linear_mode+0xbe>
		else if((_stepper->usteps_to_count - _stepper->ustep_counter) < _stepper->ramp.usteps_to_stop)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c3a:	1ad2      	subs	r2, r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	69db      	ldr	r3, [r3, #28]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d211      	bcs.n	8000c68 <stepper_ramp_process_linear_mode+0xb8>
			speed = _stepper->actual_speed - (_stepper->profile.decel / STEPPER_MOTOR_TASK_FREQUENCY);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	695b      	ldr	r3, [r3, #20]
 8000c4c:	491e      	ldr	r1, [pc, #120]	; (8000cc8 <stepper_ramp_process_linear_mode+0x118>)
 8000c4e:	fba1 1303 	umull	r1, r3, r1, r3
 8000c52:	095b      	lsrs	r3, r3, #5
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	60fb      	str	r3, [r7, #12]
			if(speed < STEPPER_MOTOR_MIN_SPEED_USTEP_PER_SEC)
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000c5e:	d206      	bcs.n	8000c6e <stepper_ramp_process_linear_mode+0xbe>
				speed = STEPPER_MOTOR_MIN_SPEED_USTEP_PER_SEC;
 8000c60:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	e002      	b.n	8000c6e <stepper_ramp_process_linear_mode+0xbe>
			speed = _stepper->profile.target_speed;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	60fb      	str	r3, [r7, #12]
		stepper_set_speed(_stepper, speed);
 8000c6e:	68f9      	ldr	r1, [r7, #12]
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff fe57 	bl	8000924 <stepper_set_speed>
}
 8000c76:	e022      	b.n	8000cbe <stepper_ramp_process_linear_mode+0x10e>
	else if(stop == _stepper->mode)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	d11d      	bne.n	8000cbe <stepper_ramp_process_linear_mode+0x10e>
		if(_stepper->ustep_counter < _stepper->ramp.usteps_to_stop)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d214      	bcs.n	8000cb8 <stepper_ramp_process_linear_mode+0x108>
			speed = _stepper->actual_speed - (_stepper->profile.decel / STEPPER_MOTOR_TASK_FREQUENCY);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	490c      	ldr	r1, [pc, #48]	; (8000cc8 <stepper_ramp_process_linear_mode+0x118>)
 8000c98:	fba1 1303 	umull	r1, r3, r1, r3
 8000c9c:	095b      	lsrs	r3, r3, #5
 8000c9e:	1ad3      	subs	r3, r2, r3
 8000ca0:	60fb      	str	r3, [r7, #12]
			if(speed < STEPPER_MOTOR_MIN_SPEED_USTEP_PER_SEC)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000ca8:	d201      	bcs.n	8000cae <stepper_ramp_process_linear_mode+0xfe>
				speed = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
			stepper_set_speed(_stepper, speed);
 8000cae:	68f9      	ldr	r1, [r7, #12]
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff fe37 	bl	8000924 <stepper_set_speed>
}
 8000cb6:	e002      	b.n	8000cbe <stepper_ramp_process_linear_mode+0x10e>
			stepper_imediate_stop(_stepper);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff fdb7 	bl	800082c <stepper_imediate_stop>
}
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	51eb851f 	.word	0x51eb851f

08000ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <HAL_MspInit+0x44>)
 8000cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd6:	4a0e      	ldr	r2, [pc, #56]	; (8000d10 <HAL_MspInit+0x44>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6613      	str	r3, [r2, #96]	; 0x60
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <HAL_MspInit+0x44>)
 8000ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <HAL_MspInit+0x44>)
 8000cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cee:	4a08      	ldr	r2, [pc, #32]	; (8000d10 <HAL_MspInit+0x44>)
 8000cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf4:	6593      	str	r3, [r2, #88]	; 0x58
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_MspInit+0x44>)
 8000cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <NMI_Handler+0x4>

08000d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <MemManage_Handler+0x4>

08000d26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <BusFault_Handler+0x4>

08000d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <UsageFault_Handler+0x4>

08000d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d60:	f000 fa74 	bl	800124c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000d6e:	f002 fb27 	bl	80033c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000060 	.word	0x20000060

08000d7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <TIM2_IRQHandler+0x10>)
 8000d82:	f002 fb1d 	bl	80033c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200000ac 	.word	0x200000ac

08000d90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d94:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <SystemInit+0x64>)
 8000d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9a:	4a16      	ldr	r2, [pc, #88]	; (8000df4 <SystemInit+0x64>)
 8000d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <SystemInit+0x68>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a13      	ldr	r2, [pc, #76]	; (8000df8 <SystemInit+0x68>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <SystemInit+0x68>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <SystemInit+0x68>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a0f      	ldr	r2, [pc, #60]	; (8000df8 <SystemInit+0x68>)
 8000dbc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000dc0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000dc4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <SystemInit+0x68>)
 8000dc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dcc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <SystemInit+0x68>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a09      	ldr	r2, [pc, #36]	; (8000df8 <SystemInit+0x68>)
 8000dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dd8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000dda:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <SystemInit+0x68>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <SystemInit+0x64>)
 8000de2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000de6:	609a      	str	r2, [r3, #8]
#endif
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00
 8000df8:	40021000 	.word	0x40021000

08000dfc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e12:	463b      	mov	r3, r7
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 8000e1c:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <MX_TIM1_Init+0xa4>)
 8000e1e:	4a21      	ldr	r2, [pc, #132]	; (8000ea4 <MX_TIM1_Init+0xa8>)
 8000e20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e22:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <MX_TIM1_Init+0xa4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e28:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <MX_TIM1_Init+0xa4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <MX_TIM1_Init+0xa4>)
 8000e30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <MX_TIM1_Init+0xa4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <MX_TIM1_Init+0xa4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e42:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <MX_TIM1_Init+0xa4>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e48:	4815      	ldr	r0, [pc, #84]	; (8000ea0 <MX_TIM1_Init+0xa4>)
 8000e4a:	f002 f829 	bl	8002ea0 <HAL_TIM_Base_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000e54:	f7ff fc7c 	bl	8000750 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000e58:	2307      	movs	r3, #7
 8000e5a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000e5c:	2310      	movs	r3, #16
 8000e5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	4619      	mov	r1, r3
 8000e66:	480e      	ldr	r0, [pc, #56]	; (8000ea0 <MX_TIM1_Init+0xa4>)
 8000e68:	f002 fcda 	bl	8003820 <HAL_TIM_SlaveConfigSynchro>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000e72:	f7ff fc6d 	bl	8000750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e76:	2300      	movs	r3, #0
 8000e78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e82:	463b      	mov	r3, r7
 8000e84:	4619      	mov	r1, r3
 8000e86:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <MX_TIM1_Init+0xa4>)
 8000e88:	f003 f9d0 	bl	800422c <HAL_TIMEx_MasterConfigSynchronization>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000e92:	f7ff fc5d 	bl	8000750 <Error_Handler>
  }

}
 8000e96:	bf00      	nop
 8000e98:	3720      	adds	r7, #32
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000060 	.word	0x20000060
 8000ea4:	40012c00 	.word	0x40012c00

08000ea8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eba:	463b      	mov	r3, r7
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
 8000ec8:	615a      	str	r2, [r3, #20]
 8000eca:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000ecc:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <MX_TIM2_Init+0xb0>)
 8000ece:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ed2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8000ed4:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <MX_TIM2_Init+0xb0>)
 8000ed6:	224f      	movs	r2, #79	; 0x4f
 8000ed8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eda:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <MX_TIM2_Init+0xb0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <MX_TIM2_Init+0xb0>)
 8000ee2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ee6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <MX_TIM2_Init+0xb0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <MX_TIM2_Init+0xb0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ef4:	4818      	ldr	r0, [pc, #96]	; (8000f58 <MX_TIM2_Init+0xb0>)
 8000ef6:	f002 f82a 	bl	8002f4e <HAL_TIM_PWM_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000f00:	f7ff fc26 	bl	8000750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 8000f04:	2360      	movs	r3, #96	; 0x60
 8000f06:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000f08:	2380      	movs	r3, #128	; 0x80
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	4811      	ldr	r0, [pc, #68]	; (8000f58 <MX_TIM2_Init+0xb0>)
 8000f14:	f003 f98a 	bl	800422c <HAL_TIMEx_MasterConfigSynchronization>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000f1e:	f7ff fc17 	bl	8000750 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f22:	2360      	movs	r3, #96	; 0x60
 8000f24:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000f26:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f2a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f34:	463b      	mov	r3, r7
 8000f36:	2208      	movs	r2, #8
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4807      	ldr	r0, [pc, #28]	; (8000f58 <MX_TIM2_Init+0xb0>)
 8000f3c:	f002 fb60 	bl	8003600 <HAL_TIM_PWM_ConfigChannel>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000f46:	f7ff fc03 	bl	8000750 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000f4a:	4803      	ldr	r0, [pc, #12]	; (8000f58 <MX_TIM2_Init+0xb0>)
 8000f4c:	f000 f850 	bl	8000ff0 <HAL_TIM_MspPostInit>

}
 8000f50:	bf00      	nop
 8000f52:	3728      	adds	r7, #40	; 0x28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	200000ac 	.word	0x200000ac

08000f5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0d      	ldr	r2, [pc, #52]	; (8000fa0 <HAL_TIM_Base_MspInit+0x44>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d113      	bne.n	8000f96 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <HAL_TIM_Base_MspInit+0x48>)
 8000f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f72:	4a0c      	ldr	r2, [pc, #48]	; (8000fa4 <HAL_TIM_Base_MspInit+0x48>)
 8000f74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f78:	6613      	str	r3, [r2, #96]	; 0x60
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <HAL_TIM_Base_MspInit+0x48>)
 8000f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2019      	movs	r0, #25
 8000f8c:	f000 fa7b 	bl	8001486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f90:	2019      	movs	r0, #25
 8000f92:	f000 fa94 	bl	80014be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40012c00 	.word	0x40012c00
 8000fa4:	40021000 	.word	0x40021000

08000fa8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fb8:	d113      	bne.n	8000fe2 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <HAL_TIM_PWM_MspInit+0x44>)
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbe:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <HAL_TIM_PWM_MspInit+0x44>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_TIM_PWM_MspInit+0x44>)
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	201c      	movs	r0, #28
 8000fd8:	f000 fa55 	bl	8001486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fdc:	201c      	movs	r0, #28
 8000fde:	f000 fa6e 	bl	80014be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000

08000ff0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001010:	d11c      	bne.n	800104c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <HAL_TIM_MspPostInit+0x64>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	4a0f      	ldr	r2, [pc, #60]	; (8001054 <HAL_TIM_MspPostInit+0x64>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101e:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <HAL_TIM_MspPostInit+0x64>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = STEP_Pin;
 800102a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800102e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800103c:	2301      	movs	r3, #1
 800103e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	4619      	mov	r1, r3
 8001046:	4804      	ldr	r0, [pc, #16]	; (8001058 <HAL_TIM_MspPostInit+0x68>)
 8001048:	f000 fa54 	bl	80014f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800104c:	bf00      	nop
 800104e:	3720      	adds	r7, #32
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40021000 	.word	0x40021000
 8001058:	48000400 	.word	0x48000400

0800105c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MX_USART2_UART_Init+0x58>)
 8001062:	4a15      	ldr	r2, [pc, #84]	; (80010b8 <MX_USART2_UART_Init+0x5c>)
 8001064:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001066:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <MX_USART2_UART_Init+0x58>)
 8001068:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800106c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <MX_USART2_UART_Init+0x58>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001074:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MX_USART2_UART_Init+0x58>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <MX_USART2_UART_Init+0x58>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <MX_USART2_UART_Init+0x58>)
 8001082:	220c      	movs	r2, #12
 8001084:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <MX_USART2_UART_Init+0x58>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <MX_USART2_UART_Init+0x58>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001092:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <MX_USART2_UART_Init+0x58>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <MX_USART2_UART_Init+0x58>)
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800109e:	4805      	ldr	r0, [pc, #20]	; (80010b4 <MX_USART2_UART_Init+0x58>)
 80010a0:	f003 f96a 	bl	8004378 <HAL_UART_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010aa:	f7ff fb51 	bl	8000750 <Error_Handler>
  }

}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200000f8 	.word	0x200000f8
 80010b8:	40004400 	.word	0x40004400

080010bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	; 0x28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a17      	ldr	r2, [pc, #92]	; (8001138 <HAL_UART_MspInit+0x7c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d128      	bne.n	8001130 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <HAL_UART_MspInit+0x80>)
 80010e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e2:	4a16      	ldr	r2, [pc, #88]	; (800113c <HAL_UART_MspInit+0x80>)
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e8:	6593      	str	r3, [r2, #88]	; 0x58
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <HAL_UART_MspInit+0x80>)
 80010ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <HAL_UART_MspInit+0x80>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	4a10      	ldr	r2, [pc, #64]	; (800113c <HAL_UART_MspInit+0x80>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <HAL_UART_MspInit+0x80>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800110e:	230c      	movs	r3, #12
 8001110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800111e:	2307      	movs	r3, #7
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112c:	f000 f9e2 	bl	80014f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001130:	bf00      	nop
 8001132:	3728      	adds	r7, #40	; 0x28
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40004400 	.word	0x40004400
 800113c:	40021000 	.word	0x40021000

08001140 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001140:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001178 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001144:	f7ff fe24 	bl	8000d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001148:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800114a:	e003      	b.n	8001154 <LoopCopyDataInit>

0800114c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800114e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001150:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001152:	3104      	adds	r1, #4

08001154 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001154:	480a      	ldr	r0, [pc, #40]	; (8001180 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001158:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800115a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800115c:	d3f6      	bcc.n	800114c <CopyDataInit>
	ldr	r2, =_sbss
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001160:	e002      	b.n	8001168 <LoopFillZerobss>

08001162 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001162:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001164:	f842 3b04 	str.w	r3, [r2], #4

08001168 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <LoopForever+0x16>)
	cmp	r2, r3
 800116a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800116c:	d3f9      	bcc.n	8001162 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800116e:	f003 fd3d 	bl	8004bec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001172:	f7ff fa13 	bl	800059c <main>

08001176 <LoopForever>:

LoopForever:
    b LoopForever
 8001176:	e7fe      	b.n	8001176 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001178:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800117c:	08004cb4 	.word	0x08004cb4
	ldr	r0, =_sdata
 8001180:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001184:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001188:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800118c:	2000017c 	.word	0x2000017c

08001190 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001190:	e7fe      	b.n	8001190 <ADC1_2_IRQHandler>
	...

08001194 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <HAL_Init+0x3c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <HAL_Init+0x3c>)
 80011a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011aa:	2003      	movs	r0, #3
 80011ac:	f000 f960 	bl	8001470 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b0:	2000      	movs	r0, #0
 80011b2:	f000 f80f 	bl	80011d4 <HAL_InitTick>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d002      	beq.n	80011c2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	71fb      	strb	r3, [r7, #7]
 80011c0:	e001      	b.n	80011c6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011c2:	f7ff fd83 	bl	8000ccc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011c6:	79fb      	ldrb	r3, [r7, #7]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40022000 	.word	0x40022000

080011d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011dc:	2300      	movs	r3, #0
 80011de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011e0:	4b17      	ldr	r3, [pc, #92]	; (8001240 <HAL_InitTick+0x6c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d023      	beq.n	8001230 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011e8:	4b16      	ldr	r3, [pc, #88]	; (8001244 <HAL_InitTick+0x70>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <HAL_InitTick+0x6c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4619      	mov	r1, r3
 80011f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f96b 	bl	80014da <HAL_SYSTICK_Config>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d10f      	bne.n	800122a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b0f      	cmp	r3, #15
 800120e:	d809      	bhi.n	8001224 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001210:	2200      	movs	r2, #0
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	f04f 30ff 	mov.w	r0, #4294967295
 8001218:	f000 f935 	bl	8001486 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800121c:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <HAL_InitTick+0x74>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	e007      	b.n	8001234 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	e004      	b.n	8001234 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	73fb      	strb	r3, [r7, #15]
 800122e:	e001      	b.n	8001234 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001234:	7bfb      	ldrb	r3, [r7, #15]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000008 	.word	0x20000008
 8001244:	20000000 	.word	0x20000000
 8001248:	20000004 	.word	0x20000004

0800124c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_IncTick+0x20>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_IncTick+0x24>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4413      	add	r3, r2
 800125c:	4a04      	ldr	r2, [pc, #16]	; (8001270 <HAL_IncTick+0x24>)
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000008 	.word	0x20000008
 8001270:	20000178 	.word	0x20000178

08001274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return uwTick;
 8001278:	4b03      	ldr	r3, [pc, #12]	; (8001288 <HAL_GetTick+0x14>)
 800127a:	681b      	ldr	r3, [r3, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000178 	.word	0x20000178

0800128c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001294:	f7ff ffee 	bl	8001274 <HAL_GetTick>
 8001298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a4:	d005      	beq.n	80012b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_Delay+0x40>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4413      	add	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012b2:	bf00      	nop
 80012b4:	f7ff ffde 	bl	8001274 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d8f7      	bhi.n	80012b4 <HAL_Delay+0x28>
  {
  }
}
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000008 	.word	0x20000008

080012d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012ec:	4013      	ands	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001302:	4a04      	ldr	r2, [pc, #16]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	60d3      	str	r3, [r2, #12]
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <__NVIC_GetPriorityGrouping+0x18>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	f003 0307 	and.w	r3, r3, #7
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	db0b      	blt.n	800135e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	f003 021f 	and.w	r2, r3, #31
 800134c:	4907      	ldr	r1, [pc, #28]	; (800136c <__NVIC_EnableIRQ+0x38>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	095b      	lsrs	r3, r3, #5
 8001354:	2001      	movs	r0, #1
 8001356:	fa00 f202 	lsl.w	r2, r0, r2
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100

08001370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	db0a      	blt.n	800139a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	; (80013bc <__NVIC_SetPriority+0x4c>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	440b      	add	r3, r1
 8001394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001398:	e00a      	b.n	80013b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4908      	ldr	r1, [pc, #32]	; (80013c0 <__NVIC_SetPriority+0x50>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	3b04      	subs	r3, #4
 80013a8:	0112      	lsls	r2, r2, #4
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	761a      	strb	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000e100 	.word	0xe000e100
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f1c3 0307 	rsb	r3, r3, #7
 80013de:	2b04      	cmp	r3, #4
 80013e0:	bf28      	it	cs
 80013e2:	2304      	movcs	r3, #4
 80013e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3304      	adds	r3, #4
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d902      	bls.n	80013f4 <NVIC_EncodePriority+0x30>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3b03      	subs	r3, #3
 80013f2:	e000      	b.n	80013f6 <NVIC_EncodePriority+0x32>
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140c:	f04f 31ff 	mov.w	r1, #4294967295
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43d9      	mvns	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	4313      	orrs	r3, r2
         );
}
 800141e:	4618      	mov	r0, r3
 8001420:	3724      	adds	r7, #36	; 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800143c:	d301      	bcc.n	8001442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143e:	2301      	movs	r3, #1
 8001440:	e00f      	b.n	8001462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <SysTick_Config+0x40>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144a:	210f      	movs	r1, #15
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f7ff ff8e 	bl	8001370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <SysTick_Config+0x40>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <SysTick_Config+0x40>)
 800145c:	2207      	movs	r2, #7
 800145e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	e000e010 	.word	0xe000e010

08001470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ff29 	bl	80012d0 <__NVIC_SetPriorityGrouping>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001498:	f7ff ff3e 	bl	8001318 <__NVIC_GetPriorityGrouping>
 800149c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	6978      	ldr	r0, [r7, #20]
 80014a4:	f7ff ff8e 	bl	80013c4 <NVIC_EncodePriority>
 80014a8:	4602      	mov	r2, r0
 80014aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff5d 	bl	8001370 <__NVIC_SetPriority>
}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff31 	bl	8001334 <__NVIC_EnableIRQ>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ffa2 	bl	800142c <SysTick_Config>
 80014e8:	4603      	mov	r3, r0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001502:	e17f      	b.n	8001804 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	2101      	movs	r1, #1
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	4013      	ands	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 8171 	beq.w	80017fe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d00b      	beq.n	800153c <HAL_GPIO_Init+0x48>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d007      	beq.n	800153c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001530:	2b11      	cmp	r3, #17
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b12      	cmp	r3, #18
 800153a:	d130      	bne.n	800159e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	2203      	movs	r2, #3
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001572:	2201      	movs	r2, #1
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	091b      	lsrs	r3, r3, #4
 8001588:	f003 0201 	and.w	r2, r3, #1
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d118      	bne.n	80015dc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80015b0:	2201      	movs	r2, #1
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	08db      	lsrs	r3, r3, #3
 80015c6:	f003 0201 	and.w	r2, r3, #1
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	2203      	movs	r2, #3
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4313      	orrs	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d003      	beq.n	800161c <HAL_GPIO_Init+0x128>
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b12      	cmp	r3, #18
 800161a:	d123      	bne.n	8001664 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	08da      	lsrs	r2, r3, #3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3208      	adds	r2, #8
 8001624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001628:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	220f      	movs	r2, #15
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	691a      	ldr	r2, [r3, #16]
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	08da      	lsrs	r2, r3, #3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3208      	adds	r2, #8
 800165e:	6939      	ldr	r1, [r7, #16]
 8001660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	2203      	movs	r2, #3
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0203 	and.w	r2, r3, #3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 80ac 	beq.w	80017fe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a6:	4b5e      	ldr	r3, [pc, #376]	; (8001820 <HAL_GPIO_Init+0x32c>)
 80016a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016aa:	4a5d      	ldr	r2, [pc, #372]	; (8001820 <HAL_GPIO_Init+0x32c>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6613      	str	r3, [r2, #96]	; 0x60
 80016b2:	4b5b      	ldr	r3, [pc, #364]	; (8001820 <HAL_GPIO_Init+0x32c>)
 80016b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016be:	4a59      	ldr	r2, [pc, #356]	; (8001824 <HAL_GPIO_Init+0x330>)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	089b      	lsrs	r3, r3, #2
 80016c4:	3302      	adds	r3, #2
 80016c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	220f      	movs	r2, #15
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016e8:	d025      	beq.n	8001736 <HAL_GPIO_Init+0x242>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a4e      	ldr	r2, [pc, #312]	; (8001828 <HAL_GPIO_Init+0x334>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d01f      	beq.n	8001732 <HAL_GPIO_Init+0x23e>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a4d      	ldr	r2, [pc, #308]	; (800182c <HAL_GPIO_Init+0x338>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d019      	beq.n	800172e <HAL_GPIO_Init+0x23a>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a4c      	ldr	r2, [pc, #304]	; (8001830 <HAL_GPIO_Init+0x33c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d013      	beq.n	800172a <HAL_GPIO_Init+0x236>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a4b      	ldr	r2, [pc, #300]	; (8001834 <HAL_GPIO_Init+0x340>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d00d      	beq.n	8001726 <HAL_GPIO_Init+0x232>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a4a      	ldr	r2, [pc, #296]	; (8001838 <HAL_GPIO_Init+0x344>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d007      	beq.n	8001722 <HAL_GPIO_Init+0x22e>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a49      	ldr	r2, [pc, #292]	; (800183c <HAL_GPIO_Init+0x348>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d101      	bne.n	800171e <HAL_GPIO_Init+0x22a>
 800171a:	2306      	movs	r3, #6
 800171c:	e00c      	b.n	8001738 <HAL_GPIO_Init+0x244>
 800171e:	2307      	movs	r3, #7
 8001720:	e00a      	b.n	8001738 <HAL_GPIO_Init+0x244>
 8001722:	2305      	movs	r3, #5
 8001724:	e008      	b.n	8001738 <HAL_GPIO_Init+0x244>
 8001726:	2304      	movs	r3, #4
 8001728:	e006      	b.n	8001738 <HAL_GPIO_Init+0x244>
 800172a:	2303      	movs	r3, #3
 800172c:	e004      	b.n	8001738 <HAL_GPIO_Init+0x244>
 800172e:	2302      	movs	r3, #2
 8001730:	e002      	b.n	8001738 <HAL_GPIO_Init+0x244>
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <HAL_GPIO_Init+0x244>
 8001736:	2300      	movs	r3, #0
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	f002 0203 	and.w	r2, r2, #3
 800173e:	0092      	lsls	r2, r2, #2
 8001740:	4093      	lsls	r3, r2
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001748:	4936      	ldr	r1, [pc, #216]	; (8001824 <HAL_GPIO_Init+0x330>)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	089b      	lsrs	r3, r3, #2
 800174e:	3302      	adds	r3, #2
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001756:	4b3a      	ldr	r3, [pc, #232]	; (8001840 <HAL_GPIO_Init+0x34c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	43db      	mvns	r3, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4313      	orrs	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800177a:	4a31      	ldr	r2, [pc, #196]	; (8001840 <HAL_GPIO_Init+0x34c>)
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001780:	4b2f      	ldr	r3, [pc, #188]	; (8001840 <HAL_GPIO_Init+0x34c>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	43db      	mvns	r3, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017a4:	4a26      	ldr	r2, [pc, #152]	; (8001840 <HAL_GPIO_Init+0x34c>)
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017aa:	4b25      	ldr	r3, [pc, #148]	; (8001840 <HAL_GPIO_Init+0x34c>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	43db      	mvns	r3, r3
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4013      	ands	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017ce:	4a1c      	ldr	r2, [pc, #112]	; (8001840 <HAL_GPIO_Init+0x34c>)
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017d4:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <HAL_GPIO_Init+0x34c>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	43db      	mvns	r3, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017f8:	4a11      	ldr	r2, [pc, #68]	; (8001840 <HAL_GPIO_Init+0x34c>)
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	3301      	adds	r3, #1
 8001802:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	fa22 f303 	lsr.w	r3, r2, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	f47f ae78 	bne.w	8001504 <HAL_GPIO_Init+0x10>
  }
}
 8001814:	bf00      	nop
 8001816:	371c      	adds	r7, #28
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	40021000 	.word	0x40021000
 8001824:	40010000 	.word	0x40010000
 8001828:	48000400 	.word	0x48000400
 800182c:	48000800 	.word	0x48000800
 8001830:	48000c00 	.word	0x48000c00
 8001834:	48001000 	.word	0x48001000
 8001838:	48001400 	.word	0x48001400
 800183c:	48001800 	.word	0x48001800
 8001840:	40010400 	.word	0x40010400

08001844 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691a      	ldr	r2, [r3, #16]
 8001854:	887b      	ldrh	r3, [r7, #2]
 8001856:	4013      	ands	r3, r2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d002      	beq.n	8001862 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800185c:	2301      	movs	r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
 8001860:	e001      	b.n	8001866 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001862:	2300      	movs	r3, #0
 8001864:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001866:	7bfb      	ldrb	r3, [r7, #15]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	807b      	strh	r3, [r7, #2]
 8001880:	4613      	mov	r3, r2
 8001882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001884:	787b      	ldrb	r3, [r7, #1]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800188a:	887a      	ldrh	r2, [r7, #2]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001890:	e002      	b.n	8001898 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001892:	887a      	ldrh	r2, [r7, #2]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <HAL_PWREx_GetVoltageRange+0x18>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40007000 	.word	0x40007000

080018c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ce:	d130      	bne.n	8001932 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018d0:	4b23      	ldr	r3, [pc, #140]	; (8001960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018dc:	d038      	beq.n	8001950 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018de:	4b20      	ldr	r3, [pc, #128]	; (8001960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018e6:	4a1e      	ldr	r2, [pc, #120]	; (8001960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ee:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2232      	movs	r2, #50	; 0x32
 80018f4:	fb02 f303 	mul.w	r3, r2, r3
 80018f8:	4a1b      	ldr	r2, [pc, #108]	; (8001968 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018fa:	fba2 2303 	umull	r2, r3, r2, r3
 80018fe:	0c9b      	lsrs	r3, r3, #18
 8001900:	3301      	adds	r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001904:	e002      	b.n	800190c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	3b01      	subs	r3, #1
 800190a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800190c:	4b14      	ldr	r3, [pc, #80]	; (8001960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001918:	d102      	bne.n	8001920 <HAL_PWREx_ControlVoltageScaling+0x60>
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1f2      	bne.n	8001906 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800192c:	d110      	bne.n	8001950 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e00f      	b.n	8001952 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800193a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800193e:	d007      	beq.n	8001950 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001940:	4b07      	ldr	r3, [pc, #28]	; (8001960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001948:	4a05      	ldr	r2, [pc, #20]	; (8001960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800194a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800194e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40007000 	.word	0x40007000
 8001964:	20000000 	.word	0x20000000
 8001968:	431bde83 	.word	0x431bde83

0800196c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e3d4      	b.n	8002128 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800197e:	4ba1      	ldr	r3, [pc, #644]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001988:	4b9e      	ldr	r3, [pc, #632]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0310 	and.w	r3, r3, #16
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 80e4 	beq.w	8001b68 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d007      	beq.n	80019b6 <HAL_RCC_OscConfig+0x4a>
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	2b0c      	cmp	r3, #12
 80019aa:	f040 808b 	bne.w	8001ac4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	f040 8087 	bne.w	8001ac4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019b6:	4b93      	ldr	r3, [pc, #588]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d005      	beq.n	80019ce <HAL_RCC_OscConfig+0x62>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e3ac      	b.n	8002128 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a1a      	ldr	r2, [r3, #32]
 80019d2:	4b8c      	ldr	r3, [pc, #560]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0308 	and.w	r3, r3, #8
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d004      	beq.n	80019e8 <HAL_RCC_OscConfig+0x7c>
 80019de:	4b89      	ldr	r3, [pc, #548]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019e6:	e005      	b.n	80019f4 <HAL_RCC_OscConfig+0x88>
 80019e8:	4b86      	ldr	r3, [pc, #536]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 80019ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ee:	091b      	lsrs	r3, r3, #4
 80019f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d223      	bcs.n	8001a40 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 fd3f 	bl	8002480 <RCC_SetFlashLatencyFromMSIRange>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e38d      	b.n	8002128 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a0c:	4b7d      	ldr	r3, [pc, #500]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a7c      	ldr	r2, [pc, #496]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001a12:	f043 0308 	orr.w	r3, r3, #8
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	4b7a      	ldr	r3, [pc, #488]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	4977      	ldr	r1, [pc, #476]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a2a:	4b76      	ldr	r3, [pc, #472]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	021b      	lsls	r3, r3, #8
 8001a38:	4972      	ldr	r1, [pc, #456]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	604b      	str	r3, [r1, #4]
 8001a3e:	e025      	b.n	8001a8c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a40:	4b70      	ldr	r3, [pc, #448]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a6f      	ldr	r2, [pc, #444]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001a46:	f043 0308 	orr.w	r3, r3, #8
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	4b6d      	ldr	r3, [pc, #436]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	496a      	ldr	r1, [pc, #424]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a5e:	4b69      	ldr	r3, [pc, #420]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	021b      	lsls	r3, r3, #8
 8001a6c:	4965      	ldr	r1, [pc, #404]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d109      	bne.n	8001a8c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f000 fcff 	bl	8002480 <RCC_SetFlashLatencyFromMSIRange>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e34d      	b.n	8002128 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a8c:	f000 fc36 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 8001a90:	4601      	mov	r1, r0
 8001a92:	4b5c      	ldr	r3, [pc, #368]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	091b      	lsrs	r3, r3, #4
 8001a98:	f003 030f 	and.w	r3, r3, #15
 8001a9c:	4a5a      	ldr	r2, [pc, #360]	; (8001c08 <HAL_RCC_OscConfig+0x29c>)
 8001a9e:	5cd3      	ldrb	r3, [r2, r3]
 8001aa0:	f003 031f 	and.w	r3, r3, #31
 8001aa4:	fa21 f303 	lsr.w	r3, r1, r3
 8001aa8:	4a58      	ldr	r2, [pc, #352]	; (8001c0c <HAL_RCC_OscConfig+0x2a0>)
 8001aaa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001aac:	4b58      	ldr	r3, [pc, #352]	; (8001c10 <HAL_RCC_OscConfig+0x2a4>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fb8f 	bl	80011d4 <HAL_InitTick>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d052      	beq.n	8001b66 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	e331      	b.n	8002128 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d032      	beq.n	8001b32 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001acc:	4b4d      	ldr	r3, [pc, #308]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a4c      	ldr	r2, [pc, #304]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fbcc 	bl	8001274 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ae0:	f7ff fbc8 	bl	8001274 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e31a      	b.n	8002128 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001af2:	4b44      	ldr	r3, [pc, #272]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001afe:	4b41      	ldr	r3, [pc, #260]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a40      	ldr	r2, [pc, #256]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001b04:	f043 0308 	orr.w	r3, r3, #8
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	4b3e      	ldr	r3, [pc, #248]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	493b      	ldr	r1, [pc, #236]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b1c:	4b39      	ldr	r3, [pc, #228]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	4936      	ldr	r1, [pc, #216]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
 8001b30:	e01a      	b.n	8001b68 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b32:	4b34      	ldr	r3, [pc, #208]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a33      	ldr	r2, [pc, #204]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001b38:	f023 0301 	bic.w	r3, r3, #1
 8001b3c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b3e:	f7ff fb99 	bl	8001274 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b46:	f7ff fb95 	bl	8001274 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e2e7      	b.n	8002128 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b58:	4b2a      	ldr	r3, [pc, #168]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1f0      	bne.n	8001b46 <HAL_RCC_OscConfig+0x1da>
 8001b64:	e000      	b.n	8001b68 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b66:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d074      	beq.n	8001c5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d005      	beq.n	8001b86 <HAL_RCC_OscConfig+0x21a>
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	2b0c      	cmp	r3, #12
 8001b7e:	d10e      	bne.n	8001b9e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d10b      	bne.n	8001b9e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b86:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d064      	beq.n	8001c5c <HAL_RCC_OscConfig+0x2f0>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d160      	bne.n	8001c5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e2c4      	b.n	8002128 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba6:	d106      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x24a>
 8001ba8:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a15      	ldr	r2, [pc, #84]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	e01d      	b.n	8001bf2 <HAL_RCC_OscConfig+0x286>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bbe:	d10c      	bne.n	8001bda <HAL_RCC_OscConfig+0x26e>
 8001bc0:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0f      	ldr	r2, [pc, #60]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001bc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a0c      	ldr	r2, [pc, #48]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	e00b      	b.n	8001bf2 <HAL_RCC_OscConfig+0x286>
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a09      	ldr	r2, [pc, #36]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a06      	ldr	r2, [pc, #24]	; (8001c04 <HAL_RCC_OscConfig+0x298>)
 8001bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d01c      	beq.n	8001c34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfa:	f7ff fb3b 	bl	8001274 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c00:	e011      	b.n	8001c26 <HAL_RCC_OscConfig+0x2ba>
 8001c02:	bf00      	nop
 8001c04:	40021000 	.word	0x40021000
 8001c08:	08004c5c 	.word	0x08004c5c
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c14:	f7ff fb2e 	bl	8001274 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	; 0x64
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e280      	b.n	8002128 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c26:	4baf      	ldr	r3, [pc, #700]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0x2a8>
 8001c32:	e014      	b.n	8001c5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c34:	f7ff fb1e 	bl	8001274 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c3c:	f7ff fb1a 	bl	8001274 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	; 0x64
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e26c      	b.n	8002128 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c4e:	4ba5      	ldr	r3, [pc, #660]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x2d0>
 8001c5a:	e000      	b.n	8001c5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d060      	beq.n	8001d2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_OscConfig+0x310>
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	2b0c      	cmp	r3, #12
 8001c74:	d119      	bne.n	8001caa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d116      	bne.n	8001caa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c7c:	4b99      	ldr	r3, [pc, #612]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_RCC_OscConfig+0x328>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e249      	b.n	8002128 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c94:	4b93      	ldr	r3, [pc, #588]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	061b      	lsls	r3, r3, #24
 8001ca2:	4990      	ldr	r1, [pc, #576]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ca8:	e040      	b.n	8001d2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d023      	beq.n	8001cfa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb2:	4b8c      	ldr	r3, [pc, #560]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a8b      	ldr	r2, [pc, #556]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbe:	f7ff fad9 	bl	8001274 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc6:	f7ff fad5 	bl	8001274 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e227      	b.n	8002128 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cd8:	4b82      	ldr	r3, [pc, #520]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce4:	4b7f      	ldr	r3, [pc, #508]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	061b      	lsls	r3, r3, #24
 8001cf2:	497c      	ldr	r1, [pc, #496]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
 8001cf8:	e018      	b.n	8001d2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cfa:	4b7a      	ldr	r3, [pc, #488]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a79      	ldr	r2, [pc, #484]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001d00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d06:	f7ff fab5 	bl	8001274 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d0e:	f7ff fab1 	bl	8001274 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e203      	b.n	8002128 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d20:	4b70      	ldr	r3, [pc, #448]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1f0      	bne.n	8001d0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d03c      	beq.n	8001db2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d01c      	beq.n	8001d7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d40:	4b68      	ldr	r3, [pc, #416]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d46:	4a67      	ldr	r2, [pc, #412]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d50:	f7ff fa90 	bl	8001274 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d58:	f7ff fa8c 	bl	8001274 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e1de      	b.n	8002128 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d6a:	4b5e      	ldr	r3, [pc, #376]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0ef      	beq.n	8001d58 <HAL_RCC_OscConfig+0x3ec>
 8001d78:	e01b      	b.n	8001db2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d7a:	4b5a      	ldr	r3, [pc, #360]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d80:	4a58      	ldr	r2, [pc, #352]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001d82:	f023 0301 	bic.w	r3, r3, #1
 8001d86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8a:	f7ff fa73 	bl	8001274 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d92:	f7ff fa6f 	bl	8001274 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e1c1      	b.n	8002128 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001da4:	4b4f      	ldr	r3, [pc, #316]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1ef      	bne.n	8001d92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0304 	and.w	r3, r3, #4
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 80a6 	beq.w	8001f0c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001dc4:	4b47      	ldr	r3, [pc, #284]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10d      	bne.n	8001dec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd0:	4b44      	ldr	r3, [pc, #272]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd4:	4a43      	ldr	r2, [pc, #268]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dda:	6593      	str	r3, [r2, #88]	; 0x58
 8001ddc:	4b41      	ldr	r3, [pc, #260]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001de8:	2301      	movs	r3, #1
 8001dea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dec:	4b3e      	ldr	r3, [pc, #248]	; (8001ee8 <HAL_RCC_OscConfig+0x57c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d118      	bne.n	8001e2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001df8:	4b3b      	ldr	r3, [pc, #236]	; (8001ee8 <HAL_RCC_OscConfig+0x57c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a3a      	ldr	r2, [pc, #232]	; (8001ee8 <HAL_RCC_OscConfig+0x57c>)
 8001dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e04:	f7ff fa36 	bl	8001274 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e0c:	f7ff fa32 	bl	8001274 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e184      	b.n	8002128 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e1e:	4b32      	ldr	r3, [pc, #200]	; (8001ee8 <HAL_RCC_OscConfig+0x57c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d108      	bne.n	8001e44 <HAL_RCC_OscConfig+0x4d8>
 8001e32:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e38:	4a2a      	ldr	r2, [pc, #168]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e42:	e024      	b.n	8001e8e <HAL_RCC_OscConfig+0x522>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	2b05      	cmp	r3, #5
 8001e4a:	d110      	bne.n	8001e6e <HAL_RCC_OscConfig+0x502>
 8001e4c:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e52:	4a24      	ldr	r2, [pc, #144]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001e54:	f043 0304 	orr.w	r3, r3, #4
 8001e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e5c:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e62:	4a20      	ldr	r2, [pc, #128]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e6c:	e00f      	b.n	8001e8e <HAL_RCC_OscConfig+0x522>
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e74:	4a1b      	ldr	r2, [pc, #108]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001e76:	f023 0301 	bic.w	r3, r3, #1
 8001e7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e7e:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e84:	4a17      	ldr	r2, [pc, #92]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001e86:	f023 0304 	bic.w	r3, r3, #4
 8001e8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d016      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e96:	f7ff f9ed 	bl	8001274 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e9c:	e00a      	b.n	8001eb4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9e:	f7ff f9e9 	bl	8001274 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e139      	b.n	8002128 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_RCC_OscConfig+0x578>)
 8001eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0ed      	beq.n	8001e9e <HAL_RCC_OscConfig+0x532>
 8001ec2:	e01a      	b.n	8001efa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec4:	f7ff f9d6 	bl	8001274 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eca:	e00f      	b.n	8001eec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ecc:	f7ff f9d2 	bl	8001274 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d906      	bls.n	8001eec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e122      	b.n	8002128 <HAL_RCC_OscConfig+0x7bc>
 8001ee2:	bf00      	nop
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eec:	4b90      	ldr	r3, [pc, #576]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 8001eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1e8      	bne.n	8001ecc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001efa:	7ffb      	ldrb	r3, [r7, #31]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d105      	bne.n	8001f0c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f00:	4b8b      	ldr	r3, [pc, #556]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 8001f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f04:	4a8a      	ldr	r2, [pc, #552]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 8001f06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 8108 	beq.w	8002126 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	f040 80d0 	bne.w	80020c0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f20:	4b83      	ldr	r3, [pc, #524]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f003 0203 	and.w	r2, r3, #3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d130      	bne.n	8001f96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d127      	bne.n	8001f96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f50:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d11f      	bne.n	8001f96 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f60:	2a07      	cmp	r2, #7
 8001f62:	bf14      	ite	ne
 8001f64:	2201      	movne	r2, #1
 8001f66:	2200      	moveq	r2, #0
 8001f68:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d113      	bne.n	8001f96 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f78:	085b      	lsrs	r3, r3, #1
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d109      	bne.n	8001f96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	085b      	lsrs	r3, r3, #1
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d06e      	beq.n	8002074 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	2b0c      	cmp	r3, #12
 8001f9a:	d069      	beq.n	8002070 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f9c:	4b64      	ldr	r3, [pc, #400]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d105      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fa8:	4b61      	ldr	r3, [pc, #388]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0b7      	b.n	8002128 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fb8:	4b5d      	ldr	r3, [pc, #372]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a5c      	ldr	r2, [pc, #368]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 8001fbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fc2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fc4:	f7ff f956 	bl	8001274 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fcc:	f7ff f952 	bl	8001274 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e0a4      	b.n	8002128 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fde:	4b54      	ldr	r3, [pc, #336]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fea:	4b51      	ldr	r3, [pc, #324]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	4b51      	ldr	r3, [pc, #324]	; (8002134 <HAL_RCC_OscConfig+0x7c8>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ffa:	3a01      	subs	r2, #1
 8001ffc:	0112      	lsls	r2, r2, #4
 8001ffe:	4311      	orrs	r1, r2
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002004:	0212      	lsls	r2, r2, #8
 8002006:	4311      	orrs	r1, r2
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800200c:	0852      	lsrs	r2, r2, #1
 800200e:	3a01      	subs	r2, #1
 8002010:	0552      	lsls	r2, r2, #21
 8002012:	4311      	orrs	r1, r2
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002018:	0852      	lsrs	r2, r2, #1
 800201a:	3a01      	subs	r2, #1
 800201c:	0652      	lsls	r2, r2, #25
 800201e:	4311      	orrs	r1, r2
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002024:	0912      	lsrs	r2, r2, #4
 8002026:	0452      	lsls	r2, r2, #17
 8002028:	430a      	orrs	r2, r1
 800202a:	4941      	ldr	r1, [pc, #260]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 800202c:	4313      	orrs	r3, r2
 800202e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002030:	4b3f      	ldr	r3, [pc, #252]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a3e      	ldr	r2, [pc, #248]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 8002036:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800203a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800203c:	4b3c      	ldr	r3, [pc, #240]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4a3b      	ldr	r2, [pc, #236]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 8002042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002046:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002048:	f7ff f914 	bl	8001274 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002050:	f7ff f910 	bl	8001274 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e062      	b.n	8002128 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002062:	4b33      	ldr	r3, [pc, #204]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800206e:	e05a      	b.n	8002126 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e059      	b.n	8002128 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002074:	4b2e      	ldr	r3, [pc, #184]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d152      	bne.n	8002126 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002080:	4b2b      	ldr	r3, [pc, #172]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a2a      	ldr	r2, [pc, #168]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 8002086:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800208a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800208c:	4b28      	ldr	r3, [pc, #160]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	4a27      	ldr	r2, [pc, #156]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 8002092:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002096:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002098:	f7ff f8ec 	bl	8001274 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a0:	f7ff f8e8 	bl	8001274 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e03a      	b.n	8002128 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b2:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f0      	beq.n	80020a0 <HAL_RCC_OscConfig+0x734>
 80020be:	e032      	b.n	8002126 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	2b0c      	cmp	r3, #12
 80020c4:	d02d      	beq.n	8002122 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c6:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a19      	ldr	r2, [pc, #100]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 80020cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020d0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80020d2:	4b17      	ldr	r3, [pc, #92]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d105      	bne.n	80020ea <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80020de:	4b14      	ldr	r3, [pc, #80]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	4a13      	ldr	r2, [pc, #76]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 80020e4:	f023 0303 	bic.w	r3, r3, #3
 80020e8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80020ea:	4b11      	ldr	r3, [pc, #68]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	4a10      	ldr	r2, [pc, #64]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 80020f0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80020f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fa:	f7ff f8bb 	bl	8001274 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002102:	f7ff f8b7 	bl	8001274 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e009      	b.n	8002128 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002114:	4b06      	ldr	r3, [pc, #24]	; (8002130 <HAL_RCC_OscConfig+0x7c4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f0      	bne.n	8002102 <HAL_RCC_OscConfig+0x796>
 8002120:	e001      	b.n	8002126 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e000      	b.n	8002128 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3720      	adds	r7, #32
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40021000 	.word	0x40021000
 8002134:	f99d808c 	.word	0xf99d808c

08002138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0c8      	b.n	80022de <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800214c:	4b66      	ldr	r3, [pc, #408]	; (80022e8 <HAL_RCC_ClockConfig+0x1b0>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d910      	bls.n	800217c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215a:	4b63      	ldr	r3, [pc, #396]	; (80022e8 <HAL_RCC_ClockConfig+0x1b0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f023 0207 	bic.w	r2, r3, #7
 8002162:	4961      	ldr	r1, [pc, #388]	; (80022e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	4313      	orrs	r3, r2
 8002168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216a:	4b5f      	ldr	r3, [pc, #380]	; (80022e8 <HAL_RCC_ClockConfig+0x1b0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0b0      	b.n	80022de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b00      	cmp	r3, #0
 8002186:	d04c      	beq.n	8002222 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b03      	cmp	r3, #3
 800218e:	d107      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002190:	4b56      	ldr	r3, [pc, #344]	; (80022ec <HAL_RCC_ClockConfig+0x1b4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d121      	bne.n	80021e0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e09e      	b.n	80022de <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d107      	bne.n	80021b8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a8:	4b50      	ldr	r3, [pc, #320]	; (80022ec <HAL_RCC_ClockConfig+0x1b4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d115      	bne.n	80021e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e092      	b.n	80022de <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d107      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021c0:	4b4a      	ldr	r3, [pc, #296]	; (80022ec <HAL_RCC_ClockConfig+0x1b4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d109      	bne.n	80021e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e086      	b.n	80022de <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021d0:	4b46      	ldr	r3, [pc, #280]	; (80022ec <HAL_RCC_ClockConfig+0x1b4>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e07e      	b.n	80022de <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021e0:	4b42      	ldr	r3, [pc, #264]	; (80022ec <HAL_RCC_ClockConfig+0x1b4>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f023 0203 	bic.w	r2, r3, #3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	493f      	ldr	r1, [pc, #252]	; (80022ec <HAL_RCC_ClockConfig+0x1b4>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021f2:	f7ff f83f 	bl	8001274 <HAL_GetTick>
 80021f6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f8:	e00a      	b.n	8002210 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021fa:	f7ff f83b 	bl	8001274 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	f241 3288 	movw	r2, #5000	; 0x1388
 8002208:	4293      	cmp	r3, r2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e066      	b.n	80022de <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002210:	4b36      	ldr	r3, [pc, #216]	; (80022ec <HAL_RCC_ClockConfig+0x1b4>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 020c 	and.w	r2, r3, #12
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	429a      	cmp	r2, r3
 8002220:	d1eb      	bne.n	80021fa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d008      	beq.n	8002240 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800222e:	4b2f      	ldr	r3, [pc, #188]	; (80022ec <HAL_RCC_ClockConfig+0x1b4>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	492c      	ldr	r1, [pc, #176]	; (80022ec <HAL_RCC_ClockConfig+0x1b4>)
 800223c:	4313      	orrs	r3, r2
 800223e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002240:	4b29      	ldr	r3, [pc, #164]	; (80022e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d210      	bcs.n	8002270 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224e:	4b26      	ldr	r3, [pc, #152]	; (80022e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 0207 	bic.w	r2, r3, #7
 8002256:	4924      	ldr	r1, [pc, #144]	; (80022e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	4313      	orrs	r3, r2
 800225c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800225e:	4b22      	ldr	r3, [pc, #136]	; (80022e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	429a      	cmp	r2, r3
 800226a:	d001      	beq.n	8002270 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e036      	b.n	80022de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800227c:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <HAL_RCC_ClockConfig+0x1b4>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4918      	ldr	r1, [pc, #96]	; (80022ec <HAL_RCC_ClockConfig+0x1b4>)
 800228a:	4313      	orrs	r3, r2
 800228c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d009      	beq.n	80022ae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800229a:	4b14      	ldr	r3, [pc, #80]	; (80022ec <HAL_RCC_ClockConfig+0x1b4>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4910      	ldr	r1, [pc, #64]	; (80022ec <HAL_RCC_ClockConfig+0x1b4>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022ae:	f000 f825 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 80022b2:	4601      	mov	r1, r0
 80022b4:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <HAL_RCC_ClockConfig+0x1b4>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	4a0c      	ldr	r2, [pc, #48]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 80022c0:	5cd3      	ldrb	r3, [r2, r3]
 80022c2:	f003 031f 	and.w	r3, r3, #31
 80022c6:	fa21 f303 	lsr.w	r3, r1, r3
 80022ca:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe ff7e 	bl	80011d4 <HAL_InitTick>
 80022d8:	4603      	mov	r3, r0
 80022da:	72fb      	strb	r3, [r7, #11]

  return status;
 80022dc:	7afb      	ldrb	r3, [r7, #11]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40022000 	.word	0x40022000
 80022ec:	40021000 	.word	0x40021000
 80022f0:	08004c5c 	.word	0x08004c5c
 80022f4:	20000000 	.word	0x20000000
 80022f8:	20000004 	.word	0x20000004

080022fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b089      	sub	sp, #36	; 0x24
 8002300:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
 8002306:	2300      	movs	r3, #0
 8002308:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800230a:	4b3d      	ldr	r3, [pc, #244]	; (8002400 <HAL_RCC_GetSysClockFreq+0x104>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002314:	4b3a      	ldr	r3, [pc, #232]	; (8002400 <HAL_RCC_GetSysClockFreq+0x104>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d005      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0x34>
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	2b0c      	cmp	r3, #12
 8002328:	d121      	bne.n	800236e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d11e      	bne.n	800236e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002330:	4b33      	ldr	r3, [pc, #204]	; (8002400 <HAL_RCC_GetSysClockFreq+0x104>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	2b00      	cmp	r3, #0
 800233a:	d107      	bne.n	800234c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800233c:	4b30      	ldr	r3, [pc, #192]	; (8002400 <HAL_RCC_GetSysClockFreq+0x104>)
 800233e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002342:	0a1b      	lsrs	r3, r3, #8
 8002344:	f003 030f 	and.w	r3, r3, #15
 8002348:	61fb      	str	r3, [r7, #28]
 800234a:	e005      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800234c:	4b2c      	ldr	r3, [pc, #176]	; (8002400 <HAL_RCC_GetSysClockFreq+0x104>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	091b      	lsrs	r3, r3, #4
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002358:	4a2a      	ldr	r2, [pc, #168]	; (8002404 <HAL_RCC_GetSysClockFreq+0x108>)
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002360:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10d      	bne.n	8002384 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800236c:	e00a      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	2b04      	cmp	r3, #4
 8002372:	d102      	bne.n	800237a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002374:	4b24      	ldr	r3, [pc, #144]	; (8002408 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002376:	61bb      	str	r3, [r7, #24]
 8002378:	e004      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	2b08      	cmp	r3, #8
 800237e:	d101      	bne.n	8002384 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002380:	4b22      	ldr	r3, [pc, #136]	; (800240c <HAL_RCC_GetSysClockFreq+0x110>)
 8002382:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	2b0c      	cmp	r3, #12
 8002388:	d133      	bne.n	80023f2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800238a:	4b1d      	ldr	r3, [pc, #116]	; (8002400 <HAL_RCC_GetSysClockFreq+0x104>)
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d002      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0xa4>
 800239a:	2b03      	cmp	r3, #3
 800239c:	d003      	beq.n	80023a6 <HAL_RCC_GetSysClockFreq+0xaa>
 800239e:	e005      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023a0:	4b19      	ldr	r3, [pc, #100]	; (8002408 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023a2:	617b      	str	r3, [r7, #20]
      break;
 80023a4:	e005      	b.n	80023b2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023a6:	4b19      	ldr	r3, [pc, #100]	; (800240c <HAL_RCC_GetSysClockFreq+0x110>)
 80023a8:	617b      	str	r3, [r7, #20]
      break;
 80023aa:	e002      	b.n	80023b2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	617b      	str	r3, [r7, #20]
      break;
 80023b0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023b2:	4b13      	ldr	r3, [pc, #76]	; (8002400 <HAL_RCC_GetSysClockFreq+0x104>)
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	091b      	lsrs	r3, r3, #4
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	3301      	adds	r3, #1
 80023be:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023c0:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <HAL_RCC_GetSysClockFreq+0x104>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	0a1b      	lsrs	r3, r3, #8
 80023c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	fb02 f203 	mul.w	r2, r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023d8:	4b09      	ldr	r3, [pc, #36]	; (8002400 <HAL_RCC_GetSysClockFreq+0x104>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	0e5b      	lsrs	r3, r3, #25
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	3301      	adds	r3, #1
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80023f2:	69bb      	ldr	r3, [r7, #24]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3724      	adds	r7, #36	; 0x24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	40021000 	.word	0x40021000
 8002404:	08004c74 	.word	0x08004c74
 8002408:	00f42400 	.word	0x00f42400
 800240c:	007a1200 	.word	0x007a1200

08002410 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002414:	4b03      	ldr	r3, [pc, #12]	; (8002424 <HAL_RCC_GetHCLKFreq+0x14>)
 8002416:	681b      	ldr	r3, [r3, #0]
}
 8002418:	4618      	mov	r0, r3
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	20000000 	.word	0x20000000

08002428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800242c:	f7ff fff0 	bl	8002410 <HAL_RCC_GetHCLKFreq>
 8002430:	4601      	mov	r1, r0
 8002432:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	0a1b      	lsrs	r3, r3, #8
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	4a04      	ldr	r2, [pc, #16]	; (8002450 <HAL_RCC_GetPCLK1Freq+0x28>)
 800243e:	5cd3      	ldrb	r3, [r2, r3]
 8002440:	f003 031f 	and.w	r3, r3, #31
 8002444:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002448:	4618      	mov	r0, r3
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40021000 	.word	0x40021000
 8002450:	08004c6c 	.word	0x08004c6c

08002454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002458:	f7ff ffda 	bl	8002410 <HAL_RCC_GetHCLKFreq>
 800245c:	4601      	mov	r1, r0
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	0adb      	lsrs	r3, r3, #11
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	4a04      	ldr	r2, [pc, #16]	; (800247c <HAL_RCC_GetPCLK2Freq+0x28>)
 800246a:	5cd3      	ldrb	r3, [r2, r3]
 800246c:	f003 031f 	and.w	r3, r3, #31
 8002470:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002474:	4618      	mov	r0, r3
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40021000 	.word	0x40021000
 800247c:	08004c6c 	.word	0x08004c6c

08002480 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002488:	2300      	movs	r3, #0
 800248a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800248c:	4b2a      	ldr	r3, [pc, #168]	; (8002538 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800248e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002498:	f7ff fa04 	bl	80018a4 <HAL_PWREx_GetVoltageRange>
 800249c:	6178      	str	r0, [r7, #20]
 800249e:	e014      	b.n	80024ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024a0:	4b25      	ldr	r3, [pc, #148]	; (8002538 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a4:	4a24      	ldr	r2, [pc, #144]	; (8002538 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024aa:	6593      	str	r3, [r2, #88]	; 0x58
 80024ac:	4b22      	ldr	r3, [pc, #136]	; (8002538 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024b8:	f7ff f9f4 	bl	80018a4 <HAL_PWREx_GetVoltageRange>
 80024bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024be:	4b1e      	ldr	r3, [pc, #120]	; (8002538 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c2:	4a1d      	ldr	r2, [pc, #116]	; (8002538 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024d0:	d10b      	bne.n	80024ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b80      	cmp	r3, #128	; 0x80
 80024d6:	d919      	bls.n	800250c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2ba0      	cmp	r3, #160	; 0xa0
 80024dc:	d902      	bls.n	80024e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024de:	2302      	movs	r3, #2
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	e013      	b.n	800250c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024e4:	2301      	movs	r3, #1
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	e010      	b.n	800250c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b80      	cmp	r3, #128	; 0x80
 80024ee:	d902      	bls.n	80024f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80024f0:	2303      	movs	r3, #3
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	e00a      	b.n	800250c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b80      	cmp	r3, #128	; 0x80
 80024fa:	d102      	bne.n	8002502 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024fc:	2302      	movs	r3, #2
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	e004      	b.n	800250c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b70      	cmp	r3, #112	; 0x70
 8002506:	d101      	bne.n	800250c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002508:	2301      	movs	r3, #1
 800250a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800250c:	4b0b      	ldr	r3, [pc, #44]	; (800253c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f023 0207 	bic.w	r2, r3, #7
 8002514:	4909      	ldr	r1, [pc, #36]	; (800253c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4313      	orrs	r3, r2
 800251a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800251c:	4b07      	ldr	r3, [pc, #28]	; (800253c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	429a      	cmp	r2, r3
 8002528:	d001      	beq.n	800252e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40021000 	.word	0x40021000
 800253c:	40022000 	.word	0x40022000

08002540 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002548:	2300      	movs	r3, #0
 800254a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800254c:	2300      	movs	r3, #0
 800254e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002558:	2b00      	cmp	r3, #0
 800255a:	d03f      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002560:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002564:	d01c      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002566:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800256a:	d802      	bhi.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00e      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002570:	e01f      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002572:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002576:	d003      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002578:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800257c:	d01c      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800257e:	e018      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002580:	4b85      	ldr	r3, [pc, #532]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	4a84      	ldr	r2, [pc, #528]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800258a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800258c:	e015      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3304      	adds	r3, #4
 8002592:	2100      	movs	r1, #0
 8002594:	4618      	mov	r0, r3
 8002596:	f000 fab9 	bl	8002b0c <RCCEx_PLLSAI1_Config>
 800259a:	4603      	mov	r3, r0
 800259c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800259e:	e00c      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3320      	adds	r3, #32
 80025a4:	2100      	movs	r1, #0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 fba0 	bl	8002cec <RCCEx_PLLSAI2_Config>
 80025ac:	4603      	mov	r3, r0
 80025ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025b0:	e003      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	74fb      	strb	r3, [r7, #19]
      break;
 80025b6:	e000      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80025b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025ba:	7cfb      	ldrb	r3, [r7, #19]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10b      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025c0:	4b75      	ldr	r3, [pc, #468]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025ce:	4972      	ldr	r1, [pc, #456]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025d6:	e001      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025d8:	7cfb      	ldrb	r3, [r7, #19]
 80025da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d03f      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f0:	d01c      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0xec>
 80025f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f6:	d802      	bhi.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00e      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0xda>
 80025fc:	e01f      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80025fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002602:	d003      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002604:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002608:	d01c      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800260a:	e018      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800260c:	4b62      	ldr	r3, [pc, #392]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	4a61      	ldr	r2, [pc, #388]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002616:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002618:	e015      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3304      	adds	r3, #4
 800261e:	2100      	movs	r1, #0
 8002620:	4618      	mov	r0, r3
 8002622:	f000 fa73 	bl	8002b0c <RCCEx_PLLSAI1_Config>
 8002626:	4603      	mov	r3, r0
 8002628:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800262a:	e00c      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3320      	adds	r3, #32
 8002630:	2100      	movs	r1, #0
 8002632:	4618      	mov	r0, r3
 8002634:	f000 fb5a 	bl	8002cec <RCCEx_PLLSAI2_Config>
 8002638:	4603      	mov	r3, r0
 800263a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800263c:	e003      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	74fb      	strb	r3, [r7, #19]
      break;
 8002642:	e000      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002644:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002646:	7cfb      	ldrb	r3, [r7, #19]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10b      	bne.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800264c:	4b52      	ldr	r3, [pc, #328]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002652:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800265a:	494f      	ldr	r1, [pc, #316]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002662:	e001      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002664:	7cfb      	ldrb	r3, [r7, #19]
 8002666:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80a0 	beq.w	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002676:	2300      	movs	r3, #0
 8002678:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800267a:	4b47      	ldr	r3, [pc, #284]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800267c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800268a:	2300      	movs	r3, #0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00d      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002690:	4b41      	ldr	r3, [pc, #260]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002694:	4a40      	ldr	r2, [pc, #256]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269a:	6593      	str	r3, [r2, #88]	; 0x58
 800269c:	4b3e      	ldr	r3, [pc, #248]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800269e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026a8:	2301      	movs	r3, #1
 80026aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026ac:	4b3b      	ldr	r3, [pc, #236]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a3a      	ldr	r2, [pc, #232]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80026b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026b8:	f7fe fddc 	bl	8001274 <HAL_GetTick>
 80026bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026be:	e009      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c0:	f7fe fdd8 	bl	8001274 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d902      	bls.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	74fb      	strb	r3, [r7, #19]
        break;
 80026d2:	e005      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026d4:	4b31      	ldr	r3, [pc, #196]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0ef      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80026e0:	7cfb      	ldrb	r3, [r7, #19]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d15c      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026e6:	4b2c      	ldr	r3, [pc, #176]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d01f      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	429a      	cmp	r2, r3
 8002702:	d019      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002704:	4b24      	ldr	r3, [pc, #144]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800270e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002710:	4b21      	ldr	r3, [pc, #132]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002716:	4a20      	ldr	r2, [pc, #128]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002720:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002726:	4a1c      	ldr	r2, [pc, #112]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800272c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002730:	4a19      	ldr	r2, [pc, #100]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d016      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002742:	f7fe fd97 	bl	8001274 <HAL_GetTick>
 8002746:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002748:	e00b      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274a:	f7fe fd93 	bl	8001274 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	f241 3288 	movw	r2, #5000	; 0x1388
 8002758:	4293      	cmp	r3, r2
 800275a:	d902      	bls.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	74fb      	strb	r3, [r7, #19]
            break;
 8002760:	e006      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002762:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0ec      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002770:	7cfb      	ldrb	r3, [r7, #19]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10c      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002776:	4b08      	ldr	r3, [pc, #32]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002786:	4904      	ldr	r1, [pc, #16]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800278e:	e009      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002790:	7cfb      	ldrb	r3, [r7, #19]
 8002792:	74bb      	strb	r3, [r7, #18]
 8002794:	e006      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000
 800279c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027a0:	7cfb      	ldrb	r3, [r7, #19]
 80027a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027a4:	7c7b      	ldrb	r3, [r7, #17]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d105      	bne.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027aa:	4b9e      	ldr	r3, [pc, #632]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ae:	4a9d      	ldr	r2, [pc, #628]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00a      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027c2:	4b98      	ldr	r3, [pc, #608]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c8:	f023 0203 	bic.w	r2, r3, #3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d0:	4994      	ldr	r1, [pc, #592]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00a      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027e4:	4b8f      	ldr	r3, [pc, #572]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ea:	f023 020c 	bic.w	r2, r3, #12
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f2:	498c      	ldr	r1, [pc, #560]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002806:	4b87      	ldr	r3, [pc, #540]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	4983      	ldr	r1, [pc, #524]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00a      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002828:	4b7e      	ldr	r3, [pc, #504]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	497b      	ldr	r1, [pc, #492]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00a      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800284a:	4b76      	ldr	r3, [pc, #472]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800284c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002850:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002858:	4972      	ldr	r1, [pc, #456]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0320 	and.w	r3, r3, #32
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00a      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800286c:	4b6d      	ldr	r3, [pc, #436]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002872:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287a:	496a      	ldr	r1, [pc, #424]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00a      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800288e:	4b65      	ldr	r3, [pc, #404]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002894:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289c:	4961      	ldr	r1, [pc, #388]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00a      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028b0:	4b5c      	ldr	r3, [pc, #368]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028be:	4959      	ldr	r1, [pc, #356]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028d2:	4b54      	ldr	r3, [pc, #336]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e0:	4950      	ldr	r1, [pc, #320]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00a      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028f4:	4b4b      	ldr	r3, [pc, #300]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002902:	4948      	ldr	r1, [pc, #288]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00a      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002916:	4b43      	ldr	r3, [pc, #268]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002924:	493f      	ldr	r1, [pc, #252]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d028      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002938:	4b3a      	ldr	r3, [pc, #232]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002946:	4937      	ldr	r1, [pc, #220]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002948:	4313      	orrs	r3, r2
 800294a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002952:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002956:	d106      	bne.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002958:	4b32      	ldr	r3, [pc, #200]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	4a31      	ldr	r2, [pc, #196]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800295e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002962:	60d3      	str	r3, [r2, #12]
 8002964:	e011      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800296a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800296e:	d10c      	bne.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3304      	adds	r3, #4
 8002974:	2101      	movs	r1, #1
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f8c8 	bl	8002b0c <RCCEx_PLLSAI1_Config>
 800297c:	4603      	mov	r3, r0
 800297e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002980:	7cfb      	ldrb	r3, [r7, #19]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002986:	7cfb      	ldrb	r3, [r7, #19]
 8002988:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d028      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002996:	4b23      	ldr	r3, [pc, #140]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a4:	491f      	ldr	r1, [pc, #124]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029b4:	d106      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029b6:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	4a1a      	ldr	r2, [pc, #104]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029c0:	60d3      	str	r3, [r2, #12]
 80029c2:	e011      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3304      	adds	r3, #4
 80029d2:	2101      	movs	r1, #1
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 f899 	bl	8002b0c <RCCEx_PLLSAI1_Config>
 80029da:	4603      	mov	r3, r0
 80029dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029de:	7cfb      	ldrb	r3, [r7, #19]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80029e4:	7cfb      	ldrb	r3, [r7, #19]
 80029e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d02b      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a02:	4908      	ldr	r1, [pc, #32]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a12:	d109      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a14:	4b03      	ldr	r3, [pc, #12]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	4a02      	ldr	r2, [pc, #8]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a1e:	60d3      	str	r3, [r2, #12]
 8002a20:	e014      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002a22:	bf00      	nop
 8002a24:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a30:	d10c      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3304      	adds	r3, #4
 8002a36:	2101      	movs	r1, #1
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 f867 	bl	8002b0c <RCCEx_PLLSAI1_Config>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a42:	7cfb      	ldrb	r3, [r7, #19]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002a48:	7cfb      	ldrb	r3, [r7, #19]
 8002a4a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d02f      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a58:	4b2b      	ldr	r3, [pc, #172]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a66:	4928      	ldr	r1, [pc, #160]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a76:	d10d      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 f844 	bl	8002b0c <RCCEx_PLLSAI1_Config>
 8002a84:	4603      	mov	r3, r0
 8002a86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a88:	7cfb      	ldrb	r3, [r7, #19]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d014      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002a8e:	7cfb      	ldrb	r3, [r7, #19]
 8002a90:	74bb      	strb	r3, [r7, #18]
 8002a92:	e011      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3320      	adds	r3, #32
 8002aa2:	2102      	movs	r1, #2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 f921 	bl	8002cec <RCCEx_PLLSAI2_Config>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aae:	7cfb      	ldrb	r3, [r7, #19]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002ab4:	7cfb      	ldrb	r3, [r7, #19]
 8002ab6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00a      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ac4:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad2:	490d      	ldr	r1, [pc, #52]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00b      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ae6:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002af6:	4904      	ldr	r1, [pc, #16]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002afe:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40021000 	.word	0x40021000

08002b0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b1a:	4b73      	ldr	r3, [pc, #460]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d018      	beq.n	8002b58 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b26:	4b70      	ldr	r3, [pc, #448]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f003 0203 	and.w	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d10d      	bne.n	8002b52 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
       ||
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b3e:	4b6a      	ldr	r3, [pc, #424]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	091b      	lsrs	r3, r3, #4
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
       ||
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d044      	beq.n	8002bdc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	73fb      	strb	r3, [r7, #15]
 8002b56:	e041      	b.n	8002bdc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d00c      	beq.n	8002b7a <RCCEx_PLLSAI1_Config+0x6e>
 8002b60:	2b03      	cmp	r3, #3
 8002b62:	d013      	beq.n	8002b8c <RCCEx_PLLSAI1_Config+0x80>
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d120      	bne.n	8002baa <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b68:	4b5f      	ldr	r3, [pc, #380]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d11d      	bne.n	8002bb0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b78:	e01a      	b.n	8002bb0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b7a:	4b5b      	ldr	r3, [pc, #364]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d116      	bne.n	8002bb4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b8a:	e013      	b.n	8002bb4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b8c:	4b56      	ldr	r3, [pc, #344]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10f      	bne.n	8002bb8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b98:	4b53      	ldr	r3, [pc, #332]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d109      	bne.n	8002bb8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ba8:	e006      	b.n	8002bb8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	73fb      	strb	r3, [r7, #15]
      break;
 8002bae:	e004      	b.n	8002bba <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002bb0:	bf00      	nop
 8002bb2:	e002      	b.n	8002bba <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002bb4:	bf00      	nop
 8002bb6:	e000      	b.n	8002bba <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002bb8:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10d      	bne.n	8002bdc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bc0:	4b49      	ldr	r3, [pc, #292]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6819      	ldr	r1, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	430b      	orrs	r3, r1
 8002bd6:	4944      	ldr	r1, [pc, #272]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d17d      	bne.n	8002cde <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002be2:	4b41      	ldr	r3, [pc, #260]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a40      	ldr	r2, [pc, #256]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002be8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bee:	f7fe fb41 	bl	8001274 <HAL_GetTick>
 8002bf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bf4:	e009      	b.n	8002c0a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bf6:	f7fe fb3d 	bl	8001274 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d902      	bls.n	8002c0a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	73fb      	strb	r3, [r7, #15]
        break;
 8002c08:	e005      	b.n	8002c16 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c0a:	4b37      	ldr	r3, [pc, #220]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1ef      	bne.n	8002bf6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d160      	bne.n	8002cde <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d111      	bne.n	8002c46 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c22:	4b31      	ldr	r3, [pc, #196]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6892      	ldr	r2, [r2, #8]
 8002c32:	0211      	lsls	r1, r2, #8
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	68d2      	ldr	r2, [r2, #12]
 8002c38:	0912      	lsrs	r2, r2, #4
 8002c3a:	0452      	lsls	r2, r2, #17
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	492a      	ldr	r1, [pc, #168]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	610b      	str	r3, [r1, #16]
 8002c44:	e027      	b.n	8002c96 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d112      	bne.n	8002c72 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c4c:	4b26      	ldr	r3, [pc, #152]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6892      	ldr	r2, [r2, #8]
 8002c5c:	0211      	lsls	r1, r2, #8
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6912      	ldr	r2, [r2, #16]
 8002c62:	0852      	lsrs	r2, r2, #1
 8002c64:	3a01      	subs	r2, #1
 8002c66:	0552      	lsls	r2, r2, #21
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	491f      	ldr	r1, [pc, #124]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	610b      	str	r3, [r1, #16]
 8002c70:	e011      	b.n	8002c96 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c72:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6892      	ldr	r2, [r2, #8]
 8002c82:	0211      	lsls	r1, r2, #8
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6952      	ldr	r2, [r2, #20]
 8002c88:	0852      	lsrs	r2, r2, #1
 8002c8a:	3a01      	subs	r2, #1
 8002c8c:	0652      	lsls	r2, r2, #25
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	4915      	ldr	r1, [pc, #84]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c96:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a13      	ldr	r2, [pc, #76]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ca0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca2:	f7fe fae7 	bl	8001274 <HAL_GetTick>
 8002ca6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ca8:	e009      	b.n	8002cbe <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002caa:	f7fe fae3 	bl	8001274 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d902      	bls.n	8002cbe <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	73fb      	strb	r3, [r7, #15]
          break;
 8002cbc:	e005      	b.n	8002cca <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0ef      	beq.n	8002caa <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d106      	bne.n	8002cde <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	4903      	ldr	r1, [pc, #12]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40021000 	.word	0x40021000

08002cec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cfa:	4b68      	ldr	r3, [pc, #416]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d018      	beq.n	8002d38 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d06:	4b65      	ldr	r3, [pc, #404]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f003 0203 	and.w	r2, r3, #3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d10d      	bne.n	8002d32 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
       ||
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d009      	beq.n	8002d32 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d1e:	4b5f      	ldr	r3, [pc, #380]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	091b      	lsrs	r3, r3, #4
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
       ||
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d044      	beq.n	8002dbc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	73fb      	strb	r3, [r7, #15]
 8002d36:	e041      	b.n	8002dbc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d00c      	beq.n	8002d5a <RCCEx_PLLSAI2_Config+0x6e>
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d013      	beq.n	8002d6c <RCCEx_PLLSAI2_Config+0x80>
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d120      	bne.n	8002d8a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d48:	4b54      	ldr	r3, [pc, #336]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d11d      	bne.n	8002d90 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d58:	e01a      	b.n	8002d90 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d5a:	4b50      	ldr	r3, [pc, #320]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d116      	bne.n	8002d94 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d6a:	e013      	b.n	8002d94 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d6c:	4b4b      	ldr	r3, [pc, #300]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10f      	bne.n	8002d98 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d78:	4b48      	ldr	r3, [pc, #288]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d109      	bne.n	8002d98 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d88:	e006      	b.n	8002d98 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8002d8e:	e004      	b.n	8002d9a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002d90:	bf00      	nop
 8002d92:	e002      	b.n	8002d9a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002d94:	bf00      	nop
 8002d96:	e000      	b.n	8002d9a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002d98:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10d      	bne.n	8002dbc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002da0:	4b3e      	ldr	r3, [pc, #248]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6819      	ldr	r1, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	3b01      	subs	r3, #1
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	430b      	orrs	r3, r1
 8002db6:	4939      	ldr	r1, [pc, #228]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d167      	bne.n	8002e92 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002dc2:	4b36      	ldr	r3, [pc, #216]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a35      	ldr	r2, [pc, #212]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dce:	f7fe fa51 	bl	8001274 <HAL_GetTick>
 8002dd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dd4:	e009      	b.n	8002dea <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002dd6:	f7fe fa4d 	bl	8001274 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d902      	bls.n	8002dea <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	73fb      	strb	r3, [r7, #15]
        break;
 8002de8:	e005      	b.n	8002df6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dea:	4b2c      	ldr	r3, [pc, #176]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1ef      	bne.n	8002dd6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d14a      	bne.n	8002e92 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d111      	bne.n	8002e26 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e02:	4b26      	ldr	r3, [pc, #152]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6892      	ldr	r2, [r2, #8]
 8002e12:	0211      	lsls	r1, r2, #8
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	68d2      	ldr	r2, [r2, #12]
 8002e18:	0912      	lsrs	r2, r2, #4
 8002e1a:	0452      	lsls	r2, r2, #17
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	491f      	ldr	r1, [pc, #124]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	614b      	str	r3, [r1, #20]
 8002e24:	e011      	b.n	8002e4a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e26:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e2e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6892      	ldr	r2, [r2, #8]
 8002e36:	0211      	lsls	r1, r2, #8
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6912      	ldr	r2, [r2, #16]
 8002e3c:	0852      	lsrs	r2, r2, #1
 8002e3e:	3a01      	subs	r2, #1
 8002e40:	0652      	lsls	r2, r2, #25
 8002e42:	430a      	orrs	r2, r1
 8002e44:	4915      	ldr	r1, [pc, #84]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e4a:	4b14      	ldr	r3, [pc, #80]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a13      	ldr	r2, [pc, #76]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e54:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e56:	f7fe fa0d 	bl	8001274 <HAL_GetTick>
 8002e5a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e5c:	e009      	b.n	8002e72 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e5e:	f7fe fa09 	bl	8001274 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d902      	bls.n	8002e72 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	73fb      	strb	r3, [r7, #15]
          break;
 8002e70:	e005      	b.n	8002e7e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e72:	4b0a      	ldr	r3, [pc, #40]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0ef      	beq.n	8002e5e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d106      	bne.n	8002e92 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e84:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e86:	695a      	ldr	r2, [r3, #20]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	4903      	ldr	r1, [pc, #12]	; (8002e9c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40021000 	.word	0x40021000

08002ea0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e049      	b.n	8002f46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7fe f848 	bl	8000f5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3304      	adds	r3, #4
 8002edc:	4619      	mov	r1, r3
 8002ede:	4610      	mov	r0, r2
 8002ee0:	f000 fd08 	bl	80038f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e049      	b.n	8002ff4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d106      	bne.n	8002f7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7fe f817 	bl	8000fa8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	3304      	adds	r3, #4
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	f000 fcb1 	bl	80038f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2200      	movs	r2, #0
 800300c:	6839      	ldr	r1, [r7, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f001 f8e7 	bl	80041e2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a3e      	ldr	r2, [pc, #248]	; (8003114 <HAL_TIM_PWM_Stop+0x118>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d013      	beq.n	8003046 <HAL_TIM_PWM_Stop+0x4a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a3d      	ldr	r2, [pc, #244]	; (8003118 <HAL_TIM_PWM_Stop+0x11c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d00e      	beq.n	8003046 <HAL_TIM_PWM_Stop+0x4a>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a3b      	ldr	r2, [pc, #236]	; (800311c <HAL_TIM_PWM_Stop+0x120>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d009      	beq.n	8003046 <HAL_TIM_PWM_Stop+0x4a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a3a      	ldr	r2, [pc, #232]	; (8003120 <HAL_TIM_PWM_Stop+0x124>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d004      	beq.n	8003046 <HAL_TIM_PWM_Stop+0x4a>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a38      	ldr	r2, [pc, #224]	; (8003124 <HAL_TIM_PWM_Stop+0x128>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d101      	bne.n	800304a <HAL_TIM_PWM_Stop+0x4e>
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <HAL_TIM_PWM_Stop+0x50>
 800304a:	2300      	movs	r3, #0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d017      	beq.n	8003080 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6a1a      	ldr	r2, [r3, #32]
 8003056:	f241 1311 	movw	r3, #4369	; 0x1111
 800305a:	4013      	ands	r3, r2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10f      	bne.n	8003080 <HAL_TIM_PWM_Stop+0x84>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6a1a      	ldr	r2, [r3, #32]
 8003066:	f240 4344 	movw	r3, #1092	; 0x444
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d107      	bne.n	8003080 <HAL_TIM_PWM_Stop+0x84>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800307e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6a1a      	ldr	r2, [r3, #32]
 8003086:	f241 1311 	movw	r3, #4369	; 0x1111
 800308a:	4013      	ands	r3, r2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10f      	bne.n	80030b0 <HAL_TIM_PWM_Stop+0xb4>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6a1a      	ldr	r2, [r3, #32]
 8003096:	f240 4344 	movw	r3, #1092	; 0x444
 800309a:	4013      	ands	r3, r2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d107      	bne.n	80030b0 <HAL_TIM_PWM_Stop+0xb4>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0201 	bic.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d104      	bne.n	80030c0 <HAL_TIM_PWM_Stop+0xc4>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030be:	e023      	b.n	8003108 <HAL_TIM_PWM_Stop+0x10c>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d104      	bne.n	80030d0 <HAL_TIM_PWM_Stop+0xd4>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030ce:	e01b      	b.n	8003108 <HAL_TIM_PWM_Stop+0x10c>
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d104      	bne.n	80030e0 <HAL_TIM_PWM_Stop+0xe4>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030de:	e013      	b.n	8003108 <HAL_TIM_PWM_Stop+0x10c>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	2b0c      	cmp	r3, #12
 80030e4:	d104      	bne.n	80030f0 <HAL_TIM_PWM_Stop+0xf4>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030ee:	e00b      	b.n	8003108 <HAL_TIM_PWM_Stop+0x10c>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	2b10      	cmp	r3, #16
 80030f4:	d104      	bne.n	8003100 <HAL_TIM_PWM_Stop+0x104>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030fe:	e003      	b.n	8003108 <HAL_TIM_PWM_Stop+0x10c>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40012c00 	.word	0x40012c00
 8003118:	40013400 	.word	0x40013400
 800311c:	40014000 	.word	0x40014000
 8003120:	40014400 	.word	0x40014400
 8003124:	40014800 	.word	0x40014800

08003128 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d109      	bne.n	800314c <HAL_TIM_PWM_Start_IT+0x24>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b01      	cmp	r3, #1
 8003142:	bf14      	ite	ne
 8003144:	2301      	movne	r3, #1
 8003146:	2300      	moveq	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	e03c      	b.n	80031c6 <HAL_TIM_PWM_Start_IT+0x9e>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2b04      	cmp	r3, #4
 8003150:	d109      	bne.n	8003166 <HAL_TIM_PWM_Start_IT+0x3e>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b01      	cmp	r3, #1
 800315c:	bf14      	ite	ne
 800315e:	2301      	movne	r3, #1
 8003160:	2300      	moveq	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	e02f      	b.n	80031c6 <HAL_TIM_PWM_Start_IT+0x9e>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b08      	cmp	r3, #8
 800316a:	d109      	bne.n	8003180 <HAL_TIM_PWM_Start_IT+0x58>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b01      	cmp	r3, #1
 8003176:	bf14      	ite	ne
 8003178:	2301      	movne	r3, #1
 800317a:	2300      	moveq	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	e022      	b.n	80031c6 <HAL_TIM_PWM_Start_IT+0x9e>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	2b0c      	cmp	r3, #12
 8003184:	d109      	bne.n	800319a <HAL_TIM_PWM_Start_IT+0x72>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b01      	cmp	r3, #1
 8003190:	bf14      	ite	ne
 8003192:	2301      	movne	r3, #1
 8003194:	2300      	moveq	r3, #0
 8003196:	b2db      	uxtb	r3, r3
 8003198:	e015      	b.n	80031c6 <HAL_TIM_PWM_Start_IT+0x9e>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b10      	cmp	r3, #16
 800319e:	d109      	bne.n	80031b4 <HAL_TIM_PWM_Start_IT+0x8c>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	bf14      	ite	ne
 80031ac:	2301      	movne	r3, #1
 80031ae:	2300      	moveq	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	e008      	b.n	80031c6 <HAL_TIM_PWM_Start_IT+0x9e>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b01      	cmp	r3, #1
 80031be:	bf14      	ite	ne
 80031c0:	2301      	movne	r3, #1
 80031c2:	2300      	moveq	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e0e2      	b.n	8003394 <HAL_TIM_PWM_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d104      	bne.n	80031de <HAL_TIM_PWM_Start_IT+0xb6>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031dc:	e023      	b.n	8003226 <HAL_TIM_PWM_Start_IT+0xfe>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d104      	bne.n	80031ee <HAL_TIM_PWM_Start_IT+0xc6>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031ec:	e01b      	b.n	8003226 <HAL_TIM_PWM_Start_IT+0xfe>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d104      	bne.n	80031fe <HAL_TIM_PWM_Start_IT+0xd6>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031fc:	e013      	b.n	8003226 <HAL_TIM_PWM_Start_IT+0xfe>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b0c      	cmp	r3, #12
 8003202:	d104      	bne.n	800320e <HAL_TIM_PWM_Start_IT+0xe6>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800320c:	e00b      	b.n	8003226 <HAL_TIM_PWM_Start_IT+0xfe>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b10      	cmp	r3, #16
 8003212:	d104      	bne.n	800321e <HAL_TIM_PWM_Start_IT+0xf6>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800321c:	e003      	b.n	8003226 <HAL_TIM_PWM_Start_IT+0xfe>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2202      	movs	r2, #2
 8003222:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	2b0c      	cmp	r3, #12
 800322a:	d841      	bhi.n	80032b0 <HAL_TIM_PWM_Start_IT+0x188>
 800322c:	a201      	add	r2, pc, #4	; (adr r2, 8003234 <HAL_TIM_PWM_Start_IT+0x10c>)
 800322e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003232:	bf00      	nop
 8003234:	08003269 	.word	0x08003269
 8003238:	080032b1 	.word	0x080032b1
 800323c:	080032b1 	.word	0x080032b1
 8003240:	080032b1 	.word	0x080032b1
 8003244:	0800327b 	.word	0x0800327b
 8003248:	080032b1 	.word	0x080032b1
 800324c:	080032b1 	.word	0x080032b1
 8003250:	080032b1 	.word	0x080032b1
 8003254:	0800328d 	.word	0x0800328d
 8003258:	080032b1 	.word	0x080032b1
 800325c:	080032b1 	.word	0x080032b1
 8003260:	080032b1 	.word	0x080032b1
 8003264:	0800329f 	.word	0x0800329f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0202 	orr.w	r2, r2, #2
 8003276:	60da      	str	r2, [r3, #12]
      break;
 8003278:	e01b      	b.n	80032b2 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 0204 	orr.w	r2, r2, #4
 8003288:	60da      	str	r2, [r3, #12]
      break;
 800328a:	e012      	b.n	80032b2 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0208 	orr.w	r2, r2, #8
 800329a:	60da      	str	r2, [r3, #12]
      break;
 800329c:	e009      	b.n	80032b2 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0210 	orr.w	r2, r2, #16
 80032ac:	60da      	str	r2, [r3, #12]
      break;
 80032ae:	e000      	b.n	80032b2 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 80032b0:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2201      	movs	r2, #1
 80032b8:	6839      	ldr	r1, [r7, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 ff91 	bl	80041e2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a35      	ldr	r2, [pc, #212]	; (800339c <HAL_TIM_PWM_Start_IT+0x274>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d013      	beq.n	80032f2 <HAL_TIM_PWM_Start_IT+0x1ca>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a34      	ldr	r2, [pc, #208]	; (80033a0 <HAL_TIM_PWM_Start_IT+0x278>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00e      	beq.n	80032f2 <HAL_TIM_PWM_Start_IT+0x1ca>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a32      	ldr	r2, [pc, #200]	; (80033a4 <HAL_TIM_PWM_Start_IT+0x27c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d009      	beq.n	80032f2 <HAL_TIM_PWM_Start_IT+0x1ca>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a31      	ldr	r2, [pc, #196]	; (80033a8 <HAL_TIM_PWM_Start_IT+0x280>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d004      	beq.n	80032f2 <HAL_TIM_PWM_Start_IT+0x1ca>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a2f      	ldr	r2, [pc, #188]	; (80033ac <HAL_TIM_PWM_Start_IT+0x284>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d101      	bne.n	80032f6 <HAL_TIM_PWM_Start_IT+0x1ce>
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80032f6:	2300      	movs	r3, #0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d007      	beq.n	800330c <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800330a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a22      	ldr	r2, [pc, #136]	; (800339c <HAL_TIM_PWM_Start_IT+0x274>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d01d      	beq.n	8003352 <HAL_TIM_PWM_Start_IT+0x22a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800331e:	d018      	beq.n	8003352 <HAL_TIM_PWM_Start_IT+0x22a>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a22      	ldr	r2, [pc, #136]	; (80033b0 <HAL_TIM_PWM_Start_IT+0x288>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d013      	beq.n	8003352 <HAL_TIM_PWM_Start_IT+0x22a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a21      	ldr	r2, [pc, #132]	; (80033b4 <HAL_TIM_PWM_Start_IT+0x28c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d00e      	beq.n	8003352 <HAL_TIM_PWM_Start_IT+0x22a>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a1f      	ldr	r2, [pc, #124]	; (80033b8 <HAL_TIM_PWM_Start_IT+0x290>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d009      	beq.n	8003352 <HAL_TIM_PWM_Start_IT+0x22a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a17      	ldr	r2, [pc, #92]	; (80033a0 <HAL_TIM_PWM_Start_IT+0x278>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d004      	beq.n	8003352 <HAL_TIM_PWM_Start_IT+0x22a>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a15      	ldr	r2, [pc, #84]	; (80033a4 <HAL_TIM_PWM_Start_IT+0x27c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d115      	bne.n	800337e <HAL_TIM_PWM_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	4b18      	ldr	r3, [pc, #96]	; (80033bc <HAL_TIM_PWM_Start_IT+0x294>)
 800335a:	4013      	ands	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2b06      	cmp	r3, #6
 8003362:	d015      	beq.n	8003390 <HAL_TIM_PWM_Start_IT+0x268>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336a:	d011      	beq.n	8003390 <HAL_TIM_PWM_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337c:	e008      	b.n	8003390 <HAL_TIM_PWM_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0201 	orr.w	r2, r2, #1
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	e000      	b.n	8003392 <HAL_TIM_PWM_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003390:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40012c00 	.word	0x40012c00
 80033a0:	40013400 	.word	0x40013400
 80033a4:	40014000 	.word	0x40014000
 80033a8:	40014400 	.word	0x40014400
 80033ac:	40014800 	.word	0x40014800
 80033b0:	40000400 	.word	0x40000400
 80033b4:	40000800 	.word	0x40000800
 80033b8:	40000c00 	.word	0x40000c00
 80033bc:	00010007 	.word	0x00010007

080033c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d122      	bne.n	800341c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d11b      	bne.n	800341c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f06f 0202 	mvn.w	r2, #2
 80033ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fa62 	bl	80038cc <HAL_TIM_IC_CaptureCallback>
 8003408:	e005      	b.n	8003416 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 fa54 	bl	80038b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7fd f977 	bl	8000704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	2b04      	cmp	r3, #4
 8003428:	d122      	bne.n	8003470 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b04      	cmp	r3, #4
 8003436:	d11b      	bne.n	8003470 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0204 	mvn.w	r2, #4
 8003440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2202      	movs	r2, #2
 8003446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fa38 	bl	80038cc <HAL_TIM_IC_CaptureCallback>
 800345c:	e005      	b.n	800346a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fa2a 	bl	80038b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7fd f94d 	bl	8000704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b08      	cmp	r3, #8
 800347c:	d122      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	2b08      	cmp	r3, #8
 800348a:	d11b      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0208 	mvn.w	r2, #8
 8003494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2204      	movs	r2, #4
 800349a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fa0e 	bl	80038cc <HAL_TIM_IC_CaptureCallback>
 80034b0:	e005      	b.n	80034be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fa00 	bl	80038b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7fd f923 	bl	8000704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f003 0310 	and.w	r3, r3, #16
 80034ce:	2b10      	cmp	r3, #16
 80034d0:	d122      	bne.n	8003518 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0310 	and.w	r3, r3, #16
 80034dc:	2b10      	cmp	r3, #16
 80034de:	d11b      	bne.n	8003518 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0210 	mvn.w	r2, #16
 80034e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2208      	movs	r2, #8
 80034ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f9e4 	bl	80038cc <HAL_TIM_IC_CaptureCallback>
 8003504:	e005      	b.n	8003512 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f9d6 	bl	80038b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7fd f8f9 	bl	8000704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b01      	cmp	r3, #1
 8003524:	d10e      	bne.n	8003544 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b01      	cmp	r3, #1
 8003532:	d107      	bne.n	8003544 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f06f 0201 	mvn.w	r2, #1
 800353c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f9b0 	bl	80038a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354e:	2b80      	cmp	r3, #128	; 0x80
 8003550:	d10e      	bne.n	8003570 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355c:	2b80      	cmp	r3, #128	; 0x80
 800355e:	d107      	bne.n	8003570 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 fef0 	bl	8004350 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800357e:	d10e      	bne.n	800359e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358a:	2b80      	cmp	r3, #128	; 0x80
 800358c:	d107      	bne.n	800359e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 fee3 	bl	8004364 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a8:	2b40      	cmp	r3, #64	; 0x40
 80035aa:	d10e      	bne.n	80035ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b6:	2b40      	cmp	r3, #64	; 0x40
 80035b8:	d107      	bne.n	80035ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f98b 	bl	80038e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	d10e      	bne.n	80035f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b20      	cmp	r3, #32
 80035e4:	d107      	bne.n	80035f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f06f 0220 	mvn.w	r2, #32
 80035ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 fea3 	bl	800433c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003612:	2b01      	cmp	r3, #1
 8003614:	d101      	bne.n	800361a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003616:	2302      	movs	r3, #2
 8003618:	e0fd      	b.n	8003816 <HAL_TIM_PWM_ConfigChannel+0x216>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b14      	cmp	r3, #20
 8003626:	f200 80f0 	bhi.w	800380a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800362a:	a201      	add	r2, pc, #4	; (adr r2, 8003630 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800362c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003630:	08003685 	.word	0x08003685
 8003634:	0800380b 	.word	0x0800380b
 8003638:	0800380b 	.word	0x0800380b
 800363c:	0800380b 	.word	0x0800380b
 8003640:	080036c5 	.word	0x080036c5
 8003644:	0800380b 	.word	0x0800380b
 8003648:	0800380b 	.word	0x0800380b
 800364c:	0800380b 	.word	0x0800380b
 8003650:	08003707 	.word	0x08003707
 8003654:	0800380b 	.word	0x0800380b
 8003658:	0800380b 	.word	0x0800380b
 800365c:	0800380b 	.word	0x0800380b
 8003660:	08003747 	.word	0x08003747
 8003664:	0800380b 	.word	0x0800380b
 8003668:	0800380b 	.word	0x0800380b
 800366c:	0800380b 	.word	0x0800380b
 8003670:	08003789 	.word	0x08003789
 8003674:	0800380b 	.word	0x0800380b
 8003678:	0800380b 	.word	0x0800380b
 800367c:	0800380b 	.word	0x0800380b
 8003680:	080037c9 	.word	0x080037c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68b9      	ldr	r1, [r7, #8]
 800368a:	4618      	mov	r0, r3
 800368c:	f000 f9cc 	bl	8003a28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0208 	orr.w	r2, r2, #8
 800369e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699a      	ldr	r2, [r3, #24]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0204 	bic.w	r2, r2, #4
 80036ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6999      	ldr	r1, [r3, #24]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	691a      	ldr	r2, [r3, #16]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	619a      	str	r2, [r3, #24]
      break;
 80036c2:	e0a3      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68b9      	ldr	r1, [r7, #8]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 fa3c 	bl	8003b48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699a      	ldr	r2, [r3, #24]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6999      	ldr	r1, [r3, #24]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	021a      	lsls	r2, r3, #8
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	619a      	str	r2, [r3, #24]
      break;
 8003704:	e082      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68b9      	ldr	r1, [r7, #8]
 800370c:	4618      	mov	r0, r3
 800370e:	f000 faa5 	bl	8003c5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69da      	ldr	r2, [r3, #28]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 0208 	orr.w	r2, r2, #8
 8003720:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	69da      	ldr	r2, [r3, #28]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0204 	bic.w	r2, r2, #4
 8003730:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	69d9      	ldr	r1, [r3, #28]
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	61da      	str	r2, [r3, #28]
      break;
 8003744:	e062      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68b9      	ldr	r1, [r7, #8]
 800374c:	4618      	mov	r0, r3
 800374e:	f000 fb0d 	bl	8003d6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	69da      	ldr	r2, [r3, #28]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003760:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	69da      	ldr	r2, [r3, #28]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003770:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69d9      	ldr	r1, [r3, #28]
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	021a      	lsls	r2, r3, #8
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	61da      	str	r2, [r3, #28]
      break;
 8003786:	e041      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68b9      	ldr	r1, [r7, #8]
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fb56 	bl	8003e40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0208 	orr.w	r2, r2, #8
 80037a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0204 	bic.w	r2, r2, #4
 80037b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	691a      	ldr	r2, [r3, #16]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80037c6:	e021      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68b9      	ldr	r1, [r7, #8]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 fb9a 	bl	8003f08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	021a      	lsls	r2, r3, #8
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003808:	e000      	b.n	800380c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800380a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop

08003820 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003834:	2302      	movs	r3, #2
 8003836:	e031      	b.n	800389c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003848:	6839      	ldr	r1, [r7, #0]
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fbc2 	bl	8003fd4 <TIM_SlaveTimer_SetConfig>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d009      	beq.n	800386a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e018      	b.n	800389c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003878:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003888:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a40      	ldr	r2, [pc, #256]	; (8003a08 <TIM_Base_SetConfig+0x114>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d013      	beq.n	8003934 <TIM_Base_SetConfig+0x40>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003912:	d00f      	beq.n	8003934 <TIM_Base_SetConfig+0x40>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a3d      	ldr	r2, [pc, #244]	; (8003a0c <TIM_Base_SetConfig+0x118>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d00b      	beq.n	8003934 <TIM_Base_SetConfig+0x40>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a3c      	ldr	r2, [pc, #240]	; (8003a10 <TIM_Base_SetConfig+0x11c>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d007      	beq.n	8003934 <TIM_Base_SetConfig+0x40>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a3b      	ldr	r2, [pc, #236]	; (8003a14 <TIM_Base_SetConfig+0x120>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d003      	beq.n	8003934 <TIM_Base_SetConfig+0x40>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a3a      	ldr	r2, [pc, #232]	; (8003a18 <TIM_Base_SetConfig+0x124>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d108      	bne.n	8003946 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a2f      	ldr	r2, [pc, #188]	; (8003a08 <TIM_Base_SetConfig+0x114>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d01f      	beq.n	800398e <TIM_Base_SetConfig+0x9a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003954:	d01b      	beq.n	800398e <TIM_Base_SetConfig+0x9a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a2c      	ldr	r2, [pc, #176]	; (8003a0c <TIM_Base_SetConfig+0x118>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d017      	beq.n	800398e <TIM_Base_SetConfig+0x9a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a2b      	ldr	r2, [pc, #172]	; (8003a10 <TIM_Base_SetConfig+0x11c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d013      	beq.n	800398e <TIM_Base_SetConfig+0x9a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a2a      	ldr	r2, [pc, #168]	; (8003a14 <TIM_Base_SetConfig+0x120>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00f      	beq.n	800398e <TIM_Base_SetConfig+0x9a>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a29      	ldr	r2, [pc, #164]	; (8003a18 <TIM_Base_SetConfig+0x124>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00b      	beq.n	800398e <TIM_Base_SetConfig+0x9a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a28      	ldr	r2, [pc, #160]	; (8003a1c <TIM_Base_SetConfig+0x128>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d007      	beq.n	800398e <TIM_Base_SetConfig+0x9a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a27      	ldr	r2, [pc, #156]	; (8003a20 <TIM_Base_SetConfig+0x12c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d003      	beq.n	800398e <TIM_Base_SetConfig+0x9a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a26      	ldr	r2, [pc, #152]	; (8003a24 <TIM_Base_SetConfig+0x130>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d108      	bne.n	80039a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a10      	ldr	r2, [pc, #64]	; (8003a08 <TIM_Base_SetConfig+0x114>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d00f      	beq.n	80039ec <TIM_Base_SetConfig+0xf8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a12      	ldr	r2, [pc, #72]	; (8003a18 <TIM_Base_SetConfig+0x124>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d00b      	beq.n	80039ec <TIM_Base_SetConfig+0xf8>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a11      	ldr	r2, [pc, #68]	; (8003a1c <TIM_Base_SetConfig+0x128>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d007      	beq.n	80039ec <TIM_Base_SetConfig+0xf8>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a10      	ldr	r2, [pc, #64]	; (8003a20 <TIM_Base_SetConfig+0x12c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d003      	beq.n	80039ec <TIM_Base_SetConfig+0xf8>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a0f      	ldr	r2, [pc, #60]	; (8003a24 <TIM_Base_SetConfig+0x130>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d103      	bne.n	80039f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	615a      	str	r2, [r3, #20]
}
 80039fa:	bf00      	nop
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40012c00 	.word	0x40012c00
 8003a0c:	40000400 	.word	0x40000400
 8003a10:	40000800 	.word	0x40000800
 8003a14:	40000c00 	.word	0x40000c00
 8003a18:	40013400 	.word	0x40013400
 8003a1c:	40014000 	.word	0x40014000
 8003a20:	40014400 	.word	0x40014400
 8003a24:	40014800 	.word	0x40014800

08003a28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	f023 0201 	bic.w	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 0303 	bic.w	r3, r3, #3
 8003a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f023 0302 	bic.w	r3, r3, #2
 8003a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a2c      	ldr	r2, [pc, #176]	; (8003b34 <TIM_OC1_SetConfig+0x10c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d00f      	beq.n	8003aa8 <TIM_OC1_SetConfig+0x80>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a2b      	ldr	r2, [pc, #172]	; (8003b38 <TIM_OC1_SetConfig+0x110>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00b      	beq.n	8003aa8 <TIM_OC1_SetConfig+0x80>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a2a      	ldr	r2, [pc, #168]	; (8003b3c <TIM_OC1_SetConfig+0x114>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d007      	beq.n	8003aa8 <TIM_OC1_SetConfig+0x80>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a29      	ldr	r2, [pc, #164]	; (8003b40 <TIM_OC1_SetConfig+0x118>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d003      	beq.n	8003aa8 <TIM_OC1_SetConfig+0x80>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a28      	ldr	r2, [pc, #160]	; (8003b44 <TIM_OC1_SetConfig+0x11c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d10c      	bne.n	8003ac2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f023 0308 	bic.w	r3, r3, #8
 8003aae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f023 0304 	bic.w	r3, r3, #4
 8003ac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a1b      	ldr	r2, [pc, #108]	; (8003b34 <TIM_OC1_SetConfig+0x10c>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00f      	beq.n	8003aea <TIM_OC1_SetConfig+0xc2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a1a      	ldr	r2, [pc, #104]	; (8003b38 <TIM_OC1_SetConfig+0x110>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00b      	beq.n	8003aea <TIM_OC1_SetConfig+0xc2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a19      	ldr	r2, [pc, #100]	; (8003b3c <TIM_OC1_SetConfig+0x114>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d007      	beq.n	8003aea <TIM_OC1_SetConfig+0xc2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a18      	ldr	r2, [pc, #96]	; (8003b40 <TIM_OC1_SetConfig+0x118>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d003      	beq.n	8003aea <TIM_OC1_SetConfig+0xc2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a17      	ldr	r2, [pc, #92]	; (8003b44 <TIM_OC1_SetConfig+0x11c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d111      	bne.n	8003b0e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003af0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003af8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	621a      	str	r2, [r3, #32]
}
 8003b28:	bf00      	nop
 8003b2a:	371c      	adds	r7, #28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	40012c00 	.word	0x40012c00
 8003b38:	40013400 	.word	0x40013400
 8003b3c:	40014000 	.word	0x40014000
 8003b40:	40014400 	.word	0x40014400
 8003b44:	40014800 	.word	0x40014800

08003b48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	f023 0210 	bic.w	r2, r3, #16
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	021b      	lsls	r3, r3, #8
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f023 0320 	bic.w	r3, r3, #32
 8003b96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a28      	ldr	r2, [pc, #160]	; (8003c48 <TIM_OC2_SetConfig+0x100>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d003      	beq.n	8003bb4 <TIM_OC2_SetConfig+0x6c>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a27      	ldr	r2, [pc, #156]	; (8003c4c <TIM_OC2_SetConfig+0x104>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d10d      	bne.n	8003bd0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a1d      	ldr	r2, [pc, #116]	; (8003c48 <TIM_OC2_SetConfig+0x100>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00f      	beq.n	8003bf8 <TIM_OC2_SetConfig+0xb0>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a1c      	ldr	r2, [pc, #112]	; (8003c4c <TIM_OC2_SetConfig+0x104>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00b      	beq.n	8003bf8 <TIM_OC2_SetConfig+0xb0>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a1b      	ldr	r2, [pc, #108]	; (8003c50 <TIM_OC2_SetConfig+0x108>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d007      	beq.n	8003bf8 <TIM_OC2_SetConfig+0xb0>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a1a      	ldr	r2, [pc, #104]	; (8003c54 <TIM_OC2_SetConfig+0x10c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d003      	beq.n	8003bf8 <TIM_OC2_SetConfig+0xb0>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a19      	ldr	r2, [pc, #100]	; (8003c58 <TIM_OC2_SetConfig+0x110>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d113      	bne.n	8003c20 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	621a      	str	r2, [r3, #32]
}
 8003c3a:	bf00      	nop
 8003c3c:	371c      	adds	r7, #28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40012c00 	.word	0x40012c00
 8003c4c:	40013400 	.word	0x40013400
 8003c50:	40014000 	.word	0x40014000
 8003c54:	40014400 	.word	0x40014400
 8003c58:	40014800 	.word	0x40014800

08003c5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0303 	bic.w	r3, r3, #3
 8003c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	021b      	lsls	r3, r3, #8
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a27      	ldr	r2, [pc, #156]	; (8003d58 <TIM_OC3_SetConfig+0xfc>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d003      	beq.n	8003cc6 <TIM_OC3_SetConfig+0x6a>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a26      	ldr	r2, [pc, #152]	; (8003d5c <TIM_OC3_SetConfig+0x100>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d10d      	bne.n	8003ce2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ccc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	021b      	lsls	r3, r3, #8
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ce0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a1c      	ldr	r2, [pc, #112]	; (8003d58 <TIM_OC3_SetConfig+0xfc>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00f      	beq.n	8003d0a <TIM_OC3_SetConfig+0xae>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a1b      	ldr	r2, [pc, #108]	; (8003d5c <TIM_OC3_SetConfig+0x100>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00b      	beq.n	8003d0a <TIM_OC3_SetConfig+0xae>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a1a      	ldr	r2, [pc, #104]	; (8003d60 <TIM_OC3_SetConfig+0x104>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d007      	beq.n	8003d0a <TIM_OC3_SetConfig+0xae>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a19      	ldr	r2, [pc, #100]	; (8003d64 <TIM_OC3_SetConfig+0x108>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d003      	beq.n	8003d0a <TIM_OC3_SetConfig+0xae>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a18      	ldr	r2, [pc, #96]	; (8003d68 <TIM_OC3_SetConfig+0x10c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d113      	bne.n	8003d32 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	621a      	str	r2, [r3, #32]
}
 8003d4c:	bf00      	nop
 8003d4e:	371c      	adds	r7, #28
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	40012c00 	.word	0x40012c00
 8003d5c:	40013400 	.word	0x40013400
 8003d60:	40014000 	.word	0x40014000
 8003d64:	40014400 	.word	0x40014400
 8003d68:	40014800 	.word	0x40014800

08003d6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	021b      	lsls	r3, r3, #8
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	031b      	lsls	r3, r3, #12
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a18      	ldr	r2, [pc, #96]	; (8003e2c <TIM_OC4_SetConfig+0xc0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00f      	beq.n	8003df0 <TIM_OC4_SetConfig+0x84>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a17      	ldr	r2, [pc, #92]	; (8003e30 <TIM_OC4_SetConfig+0xc4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d00b      	beq.n	8003df0 <TIM_OC4_SetConfig+0x84>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a16      	ldr	r2, [pc, #88]	; (8003e34 <TIM_OC4_SetConfig+0xc8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d007      	beq.n	8003df0 <TIM_OC4_SetConfig+0x84>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a15      	ldr	r2, [pc, #84]	; (8003e38 <TIM_OC4_SetConfig+0xcc>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d003      	beq.n	8003df0 <TIM_OC4_SetConfig+0x84>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a14      	ldr	r2, [pc, #80]	; (8003e3c <TIM_OC4_SetConfig+0xd0>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d109      	bne.n	8003e04 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003df6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	019b      	lsls	r3, r3, #6
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	621a      	str	r2, [r3, #32]
}
 8003e1e:	bf00      	nop
 8003e20:	371c      	adds	r7, #28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40012c00 	.word	0x40012c00
 8003e30:	40013400 	.word	0x40013400
 8003e34:	40014000 	.word	0x40014000
 8003e38:	40014400 	.word	0x40014400
 8003e3c:	40014800 	.word	0x40014800

08003e40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	041b      	lsls	r3, r3, #16
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a17      	ldr	r2, [pc, #92]	; (8003ef4 <TIM_OC5_SetConfig+0xb4>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d00f      	beq.n	8003eba <TIM_OC5_SetConfig+0x7a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a16      	ldr	r2, [pc, #88]	; (8003ef8 <TIM_OC5_SetConfig+0xb8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00b      	beq.n	8003eba <TIM_OC5_SetConfig+0x7a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a15      	ldr	r2, [pc, #84]	; (8003efc <TIM_OC5_SetConfig+0xbc>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d007      	beq.n	8003eba <TIM_OC5_SetConfig+0x7a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a14      	ldr	r2, [pc, #80]	; (8003f00 <TIM_OC5_SetConfig+0xc0>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d003      	beq.n	8003eba <TIM_OC5_SetConfig+0x7a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a13      	ldr	r2, [pc, #76]	; (8003f04 <TIM_OC5_SetConfig+0xc4>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d109      	bne.n	8003ece <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	021b      	lsls	r3, r3, #8
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	621a      	str	r2, [r3, #32]
}
 8003ee8:	bf00      	nop
 8003eea:	371c      	adds	r7, #28
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	40012c00 	.word	0x40012c00
 8003ef8:	40013400 	.word	0x40013400
 8003efc:	40014000 	.word	0x40014000
 8003f00:	40014400 	.word	0x40014400
 8003f04:	40014800 	.word	0x40014800

08003f08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	021b      	lsls	r3, r3, #8
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	051b      	lsls	r3, r3, #20
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a18      	ldr	r2, [pc, #96]	; (8003fc0 <TIM_OC6_SetConfig+0xb8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00f      	beq.n	8003f84 <TIM_OC6_SetConfig+0x7c>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a17      	ldr	r2, [pc, #92]	; (8003fc4 <TIM_OC6_SetConfig+0xbc>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00b      	beq.n	8003f84 <TIM_OC6_SetConfig+0x7c>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a16      	ldr	r2, [pc, #88]	; (8003fc8 <TIM_OC6_SetConfig+0xc0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d007      	beq.n	8003f84 <TIM_OC6_SetConfig+0x7c>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a15      	ldr	r2, [pc, #84]	; (8003fcc <TIM_OC6_SetConfig+0xc4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d003      	beq.n	8003f84 <TIM_OC6_SetConfig+0x7c>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a14      	ldr	r2, [pc, #80]	; (8003fd0 <TIM_OC6_SetConfig+0xc8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d109      	bne.n	8003f98 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	029b      	lsls	r3, r3, #10
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	621a      	str	r2, [r3, #32]
}
 8003fb2:	bf00      	nop
 8003fb4:	371c      	adds	r7, #28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	40012c00 	.word	0x40012c00
 8003fc4:	40013400 	.word	0x40013400
 8003fc8:	40014000 	.word	0x40014000
 8003fcc:	40014400 	.word	0x40014400
 8003fd0:	40014800 	.word	0x40014800

08003fd4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fec:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ffe:	f023 0307 	bic.w	r3, r3, #7
 8004002:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b30      	cmp	r3, #48	; 0x30
 800401c:	d05c      	beq.n	80040d8 <TIM_SlaveTimer_SetConfig+0x104>
 800401e:	2b30      	cmp	r3, #48	; 0x30
 8004020:	d806      	bhi.n	8004030 <TIM_SlaveTimer_SetConfig+0x5c>
 8004022:	2b10      	cmp	r3, #16
 8004024:	d058      	beq.n	80040d8 <TIM_SlaveTimer_SetConfig+0x104>
 8004026:	2b20      	cmp	r3, #32
 8004028:	d056      	beq.n	80040d8 <TIM_SlaveTimer_SetConfig+0x104>
 800402a:	2b00      	cmp	r3, #0
 800402c:	d054      	beq.n	80040d8 <TIM_SlaveTimer_SetConfig+0x104>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800402e:	e054      	b.n	80040da <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8004030:	2b50      	cmp	r3, #80	; 0x50
 8004032:	d03d      	beq.n	80040b0 <TIM_SlaveTimer_SetConfig+0xdc>
 8004034:	2b50      	cmp	r3, #80	; 0x50
 8004036:	d802      	bhi.n	800403e <TIM_SlaveTimer_SetConfig+0x6a>
 8004038:	2b40      	cmp	r3, #64	; 0x40
 800403a:	d010      	beq.n	800405e <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 800403c:	e04d      	b.n	80040da <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 800403e:	2b60      	cmp	r3, #96	; 0x60
 8004040:	d040      	beq.n	80040c4 <TIM_SlaveTimer_SetConfig+0xf0>
 8004042:	2b70      	cmp	r3, #112	; 0x70
 8004044:	d000      	beq.n	8004048 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 8004046:	e048      	b.n	80040da <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6818      	ldr	r0, [r3, #0]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	68d9      	ldr	r1, [r3, #12]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f000 f8a3 	bl	80041a2 <TIM_ETR_SetConfig>
      break;
 800405c:	e03d      	b.n	80040da <TIM_SlaveTimer_SetConfig+0x106>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b05      	cmp	r3, #5
 8004064:	d101      	bne.n	800406a <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e038      	b.n	80040dc <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6a1a      	ldr	r2, [r3, #32]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0201 	bic.w	r2, r2, #1
 8004080:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004090:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	621a      	str	r2, [r3, #32]
      break;
 80040ae:	e014      	b.n	80040da <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	6899      	ldr	r1, [r3, #8]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	461a      	mov	r2, r3
 80040be:	f000 f811 	bl	80040e4 <TIM_TI1_ConfigInputStage>
      break;
 80040c2:	e00a      	b.n	80040da <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	6899      	ldr	r1, [r3, #8]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	461a      	mov	r2, r3
 80040d2:	f000 f836 	bl	8004142 <TIM_TI2_ConfigInputStage>
      break;
 80040d6:	e000      	b.n	80040da <TIM_SlaveTimer_SetConfig+0x106>
        break;
 80040d8:	bf00      	nop
  }
  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	f023 0201 	bic.w	r2, r3, #1
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800410e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4313      	orrs	r3, r2
 8004118:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f023 030a 	bic.w	r3, r3, #10
 8004120:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4313      	orrs	r3, r2
 8004128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	621a      	str	r2, [r3, #32]
}
 8004136:	bf00      	nop
 8004138:	371c      	adds	r7, #28
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004142:	b480      	push	{r7}
 8004144:	b087      	sub	sp, #28
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	f023 0210 	bic.w	r2, r3, #16
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800416c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	031b      	lsls	r3, r3, #12
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800417e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	621a      	str	r2, [r3, #32]
}
 8004196:	bf00      	nop
 8004198:	371c      	adds	r7, #28
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b087      	sub	sp, #28
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	60f8      	str	r0, [r7, #12]
 80041aa:	60b9      	str	r1, [r7, #8]
 80041ac:	607a      	str	r2, [r7, #4]
 80041ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	021a      	lsls	r2, r3, #8
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	431a      	orrs	r2, r3
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	609a      	str	r2, [r3, #8]
}
 80041d6:	bf00      	nop
 80041d8:	371c      	adds	r7, #28
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b087      	sub	sp, #28
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	60b9      	str	r1, [r7, #8]
 80041ec:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	f003 031f 	and.w	r3, r3, #31
 80041f4:	2201      	movs	r2, #1
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a1a      	ldr	r2, [r3, #32]
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	43db      	mvns	r3, r3
 8004204:	401a      	ands	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a1a      	ldr	r2, [r3, #32]
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f003 031f 	and.w	r3, r3, #31
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	fa01 f303 	lsl.w	r3, r1, r3
 800421a:	431a      	orrs	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	621a      	str	r2, [r3, #32]
}
 8004220:	bf00      	nop
 8004222:	371c      	adds	r7, #28
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004240:	2302      	movs	r3, #2
 8004242:	e068      	b.n	8004316 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a2e      	ldr	r2, [pc, #184]	; (8004324 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d004      	beq.n	8004278 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a2d      	ldr	r2, [pc, #180]	; (8004328 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d108      	bne.n	800428a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800427e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004290:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	4313      	orrs	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a1e      	ldr	r2, [pc, #120]	; (8004324 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d01d      	beq.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b6:	d018      	beq.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a1b      	ldr	r2, [pc, #108]	; (800432c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d013      	beq.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a1a      	ldr	r2, [pc, #104]	; (8004330 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d00e      	beq.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a18      	ldr	r2, [pc, #96]	; (8004334 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d009      	beq.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a13      	ldr	r2, [pc, #76]	; (8004328 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d004      	beq.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a14      	ldr	r2, [pc, #80]	; (8004338 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d10c      	bne.n	8004304 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40012c00 	.word	0x40012c00
 8004328:	40013400 	.word	0x40013400
 800432c:	40000400 	.word	0x40000400
 8004330:	40000800 	.word	0x40000800
 8004334:	40000c00 	.word	0x40000c00
 8004338:	40014000 	.word	0x40014000

0800433c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e040      	b.n	800440c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800438e:	2b00      	cmp	r3, #0
 8004390:	d106      	bne.n	80043a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7fc fe8e 	bl	80010bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2224      	movs	r2, #36	; 0x24
 80043a4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0201 	bic.w	r2, r2, #1
 80043b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f82c 	bl	8004414 <UART_SetConfig>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e022      	b.n	800440c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d002      	beq.n	80043d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 faaa 	bl	8004928 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689a      	ldr	r2, [r3, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0201 	orr.w	r2, r2, #1
 8004402:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 fb31 	bl	8004a6c <UART_CheckIdleState>
 800440a:	4603      	mov	r3, r0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004414:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004418:	b088      	sub	sp, #32
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	431a      	orrs	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	4313      	orrs	r3, r2
 8004438:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	4bac      	ldr	r3, [pc, #688]	; (80046f4 <UART_SetConfig+0x2e0>)
 8004442:	4013      	ands	r3, r2
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6812      	ldr	r2, [r2, #0]
 8004448:	69f9      	ldr	r1, [r7, #28]
 800444a:	430b      	orrs	r3, r1
 800444c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68da      	ldr	r2, [r3, #12]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4aa2      	ldr	r2, [pc, #648]	; (80046f8 <UART_SetConfig+0x2e4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d004      	beq.n	800447e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	69fa      	ldr	r2, [r7, #28]
 800447a:	4313      	orrs	r3, r2
 800447c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	69fa      	ldr	r2, [r7, #28]
 800448e:	430a      	orrs	r2, r1
 8004490:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a99      	ldr	r2, [pc, #612]	; (80046fc <UART_SetConfig+0x2e8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d121      	bne.n	80044e0 <UART_SetConfig+0xcc>
 800449c:	4b98      	ldr	r3, [pc, #608]	; (8004700 <UART_SetConfig+0x2ec>)
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a2:	f003 0303 	and.w	r3, r3, #3
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d816      	bhi.n	80044d8 <UART_SetConfig+0xc4>
 80044aa:	a201      	add	r2, pc, #4	; (adr r2, 80044b0 <UART_SetConfig+0x9c>)
 80044ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b0:	080044c1 	.word	0x080044c1
 80044b4:	080044cd 	.word	0x080044cd
 80044b8:	080044c7 	.word	0x080044c7
 80044bc:	080044d3 	.word	0x080044d3
 80044c0:	2301      	movs	r3, #1
 80044c2:	76fb      	strb	r3, [r7, #27]
 80044c4:	e0e8      	b.n	8004698 <UART_SetConfig+0x284>
 80044c6:	2302      	movs	r3, #2
 80044c8:	76fb      	strb	r3, [r7, #27]
 80044ca:	e0e5      	b.n	8004698 <UART_SetConfig+0x284>
 80044cc:	2304      	movs	r3, #4
 80044ce:	76fb      	strb	r3, [r7, #27]
 80044d0:	e0e2      	b.n	8004698 <UART_SetConfig+0x284>
 80044d2:	2308      	movs	r3, #8
 80044d4:	76fb      	strb	r3, [r7, #27]
 80044d6:	e0df      	b.n	8004698 <UART_SetConfig+0x284>
 80044d8:	2310      	movs	r3, #16
 80044da:	76fb      	strb	r3, [r7, #27]
 80044dc:	bf00      	nop
 80044de:	e0db      	b.n	8004698 <UART_SetConfig+0x284>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a87      	ldr	r2, [pc, #540]	; (8004704 <UART_SetConfig+0x2f0>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d134      	bne.n	8004554 <UART_SetConfig+0x140>
 80044ea:	4b85      	ldr	r3, [pc, #532]	; (8004700 <UART_SetConfig+0x2ec>)
 80044ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f0:	f003 030c 	and.w	r3, r3, #12
 80044f4:	2b0c      	cmp	r3, #12
 80044f6:	d829      	bhi.n	800454c <UART_SetConfig+0x138>
 80044f8:	a201      	add	r2, pc, #4	; (adr r2, 8004500 <UART_SetConfig+0xec>)
 80044fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fe:	bf00      	nop
 8004500:	08004535 	.word	0x08004535
 8004504:	0800454d 	.word	0x0800454d
 8004508:	0800454d 	.word	0x0800454d
 800450c:	0800454d 	.word	0x0800454d
 8004510:	08004541 	.word	0x08004541
 8004514:	0800454d 	.word	0x0800454d
 8004518:	0800454d 	.word	0x0800454d
 800451c:	0800454d 	.word	0x0800454d
 8004520:	0800453b 	.word	0x0800453b
 8004524:	0800454d 	.word	0x0800454d
 8004528:	0800454d 	.word	0x0800454d
 800452c:	0800454d 	.word	0x0800454d
 8004530:	08004547 	.word	0x08004547
 8004534:	2300      	movs	r3, #0
 8004536:	76fb      	strb	r3, [r7, #27]
 8004538:	e0ae      	b.n	8004698 <UART_SetConfig+0x284>
 800453a:	2302      	movs	r3, #2
 800453c:	76fb      	strb	r3, [r7, #27]
 800453e:	e0ab      	b.n	8004698 <UART_SetConfig+0x284>
 8004540:	2304      	movs	r3, #4
 8004542:	76fb      	strb	r3, [r7, #27]
 8004544:	e0a8      	b.n	8004698 <UART_SetConfig+0x284>
 8004546:	2308      	movs	r3, #8
 8004548:	76fb      	strb	r3, [r7, #27]
 800454a:	e0a5      	b.n	8004698 <UART_SetConfig+0x284>
 800454c:	2310      	movs	r3, #16
 800454e:	76fb      	strb	r3, [r7, #27]
 8004550:	bf00      	nop
 8004552:	e0a1      	b.n	8004698 <UART_SetConfig+0x284>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a6b      	ldr	r2, [pc, #428]	; (8004708 <UART_SetConfig+0x2f4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d120      	bne.n	80045a0 <UART_SetConfig+0x18c>
 800455e:	4b68      	ldr	r3, [pc, #416]	; (8004700 <UART_SetConfig+0x2ec>)
 8004560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004564:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004568:	2b10      	cmp	r3, #16
 800456a:	d00f      	beq.n	800458c <UART_SetConfig+0x178>
 800456c:	2b10      	cmp	r3, #16
 800456e:	d802      	bhi.n	8004576 <UART_SetConfig+0x162>
 8004570:	2b00      	cmp	r3, #0
 8004572:	d005      	beq.n	8004580 <UART_SetConfig+0x16c>
 8004574:	e010      	b.n	8004598 <UART_SetConfig+0x184>
 8004576:	2b20      	cmp	r3, #32
 8004578:	d005      	beq.n	8004586 <UART_SetConfig+0x172>
 800457a:	2b30      	cmp	r3, #48	; 0x30
 800457c:	d009      	beq.n	8004592 <UART_SetConfig+0x17e>
 800457e:	e00b      	b.n	8004598 <UART_SetConfig+0x184>
 8004580:	2300      	movs	r3, #0
 8004582:	76fb      	strb	r3, [r7, #27]
 8004584:	e088      	b.n	8004698 <UART_SetConfig+0x284>
 8004586:	2302      	movs	r3, #2
 8004588:	76fb      	strb	r3, [r7, #27]
 800458a:	e085      	b.n	8004698 <UART_SetConfig+0x284>
 800458c:	2304      	movs	r3, #4
 800458e:	76fb      	strb	r3, [r7, #27]
 8004590:	e082      	b.n	8004698 <UART_SetConfig+0x284>
 8004592:	2308      	movs	r3, #8
 8004594:	76fb      	strb	r3, [r7, #27]
 8004596:	e07f      	b.n	8004698 <UART_SetConfig+0x284>
 8004598:	2310      	movs	r3, #16
 800459a:	76fb      	strb	r3, [r7, #27]
 800459c:	bf00      	nop
 800459e:	e07b      	b.n	8004698 <UART_SetConfig+0x284>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a59      	ldr	r2, [pc, #356]	; (800470c <UART_SetConfig+0x2f8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d120      	bne.n	80045ec <UART_SetConfig+0x1d8>
 80045aa:	4b55      	ldr	r3, [pc, #340]	; (8004700 <UART_SetConfig+0x2ec>)
 80045ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045b4:	2b40      	cmp	r3, #64	; 0x40
 80045b6:	d00f      	beq.n	80045d8 <UART_SetConfig+0x1c4>
 80045b8:	2b40      	cmp	r3, #64	; 0x40
 80045ba:	d802      	bhi.n	80045c2 <UART_SetConfig+0x1ae>
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <UART_SetConfig+0x1b8>
 80045c0:	e010      	b.n	80045e4 <UART_SetConfig+0x1d0>
 80045c2:	2b80      	cmp	r3, #128	; 0x80
 80045c4:	d005      	beq.n	80045d2 <UART_SetConfig+0x1be>
 80045c6:	2bc0      	cmp	r3, #192	; 0xc0
 80045c8:	d009      	beq.n	80045de <UART_SetConfig+0x1ca>
 80045ca:	e00b      	b.n	80045e4 <UART_SetConfig+0x1d0>
 80045cc:	2300      	movs	r3, #0
 80045ce:	76fb      	strb	r3, [r7, #27]
 80045d0:	e062      	b.n	8004698 <UART_SetConfig+0x284>
 80045d2:	2302      	movs	r3, #2
 80045d4:	76fb      	strb	r3, [r7, #27]
 80045d6:	e05f      	b.n	8004698 <UART_SetConfig+0x284>
 80045d8:	2304      	movs	r3, #4
 80045da:	76fb      	strb	r3, [r7, #27]
 80045dc:	e05c      	b.n	8004698 <UART_SetConfig+0x284>
 80045de:	2308      	movs	r3, #8
 80045e0:	76fb      	strb	r3, [r7, #27]
 80045e2:	e059      	b.n	8004698 <UART_SetConfig+0x284>
 80045e4:	2310      	movs	r3, #16
 80045e6:	76fb      	strb	r3, [r7, #27]
 80045e8:	bf00      	nop
 80045ea:	e055      	b.n	8004698 <UART_SetConfig+0x284>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a47      	ldr	r2, [pc, #284]	; (8004710 <UART_SetConfig+0x2fc>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d124      	bne.n	8004640 <UART_SetConfig+0x22c>
 80045f6:	4b42      	ldr	r3, [pc, #264]	; (8004700 <UART_SetConfig+0x2ec>)
 80045f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004604:	d012      	beq.n	800462c <UART_SetConfig+0x218>
 8004606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800460a:	d802      	bhi.n	8004612 <UART_SetConfig+0x1fe>
 800460c:	2b00      	cmp	r3, #0
 800460e:	d007      	beq.n	8004620 <UART_SetConfig+0x20c>
 8004610:	e012      	b.n	8004638 <UART_SetConfig+0x224>
 8004612:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004616:	d006      	beq.n	8004626 <UART_SetConfig+0x212>
 8004618:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800461c:	d009      	beq.n	8004632 <UART_SetConfig+0x21e>
 800461e:	e00b      	b.n	8004638 <UART_SetConfig+0x224>
 8004620:	2300      	movs	r3, #0
 8004622:	76fb      	strb	r3, [r7, #27]
 8004624:	e038      	b.n	8004698 <UART_SetConfig+0x284>
 8004626:	2302      	movs	r3, #2
 8004628:	76fb      	strb	r3, [r7, #27]
 800462a:	e035      	b.n	8004698 <UART_SetConfig+0x284>
 800462c:	2304      	movs	r3, #4
 800462e:	76fb      	strb	r3, [r7, #27]
 8004630:	e032      	b.n	8004698 <UART_SetConfig+0x284>
 8004632:	2308      	movs	r3, #8
 8004634:	76fb      	strb	r3, [r7, #27]
 8004636:	e02f      	b.n	8004698 <UART_SetConfig+0x284>
 8004638:	2310      	movs	r3, #16
 800463a:	76fb      	strb	r3, [r7, #27]
 800463c:	bf00      	nop
 800463e:	e02b      	b.n	8004698 <UART_SetConfig+0x284>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a2c      	ldr	r2, [pc, #176]	; (80046f8 <UART_SetConfig+0x2e4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d124      	bne.n	8004694 <UART_SetConfig+0x280>
 800464a:	4b2d      	ldr	r3, [pc, #180]	; (8004700 <UART_SetConfig+0x2ec>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004650:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004658:	d012      	beq.n	8004680 <UART_SetConfig+0x26c>
 800465a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800465e:	d802      	bhi.n	8004666 <UART_SetConfig+0x252>
 8004660:	2b00      	cmp	r3, #0
 8004662:	d007      	beq.n	8004674 <UART_SetConfig+0x260>
 8004664:	e012      	b.n	800468c <UART_SetConfig+0x278>
 8004666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800466a:	d006      	beq.n	800467a <UART_SetConfig+0x266>
 800466c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004670:	d009      	beq.n	8004686 <UART_SetConfig+0x272>
 8004672:	e00b      	b.n	800468c <UART_SetConfig+0x278>
 8004674:	2300      	movs	r3, #0
 8004676:	76fb      	strb	r3, [r7, #27]
 8004678:	e00e      	b.n	8004698 <UART_SetConfig+0x284>
 800467a:	2302      	movs	r3, #2
 800467c:	76fb      	strb	r3, [r7, #27]
 800467e:	e00b      	b.n	8004698 <UART_SetConfig+0x284>
 8004680:	2304      	movs	r3, #4
 8004682:	76fb      	strb	r3, [r7, #27]
 8004684:	e008      	b.n	8004698 <UART_SetConfig+0x284>
 8004686:	2308      	movs	r3, #8
 8004688:	76fb      	strb	r3, [r7, #27]
 800468a:	e005      	b.n	8004698 <UART_SetConfig+0x284>
 800468c:	2310      	movs	r3, #16
 800468e:	76fb      	strb	r3, [r7, #27]
 8004690:	bf00      	nop
 8004692:	e001      	b.n	8004698 <UART_SetConfig+0x284>
 8004694:	2310      	movs	r3, #16
 8004696:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a16      	ldr	r2, [pc, #88]	; (80046f8 <UART_SetConfig+0x2e4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	f040 8087 	bne.w	80047b2 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046a4:	7efb      	ldrb	r3, [r7, #27]
 80046a6:	2b08      	cmp	r3, #8
 80046a8:	d836      	bhi.n	8004718 <UART_SetConfig+0x304>
 80046aa:	a201      	add	r2, pc, #4	; (adr r2, 80046b0 <UART_SetConfig+0x29c>)
 80046ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b0:	080046d5 	.word	0x080046d5
 80046b4:	08004719 	.word	0x08004719
 80046b8:	080046dd 	.word	0x080046dd
 80046bc:	08004719 	.word	0x08004719
 80046c0:	080046e3 	.word	0x080046e3
 80046c4:	08004719 	.word	0x08004719
 80046c8:	08004719 	.word	0x08004719
 80046cc:	08004719 	.word	0x08004719
 80046d0:	080046eb 	.word	0x080046eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046d4:	f7fd fea8 	bl	8002428 <HAL_RCC_GetPCLK1Freq>
 80046d8:	6178      	str	r0, [r7, #20]
        break;
 80046da:	e022      	b.n	8004722 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046dc:	4b0d      	ldr	r3, [pc, #52]	; (8004714 <UART_SetConfig+0x300>)
 80046de:	617b      	str	r3, [r7, #20]
        break;
 80046e0:	e01f      	b.n	8004722 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046e2:	f7fd fe0b 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 80046e6:	6178      	str	r0, [r7, #20]
        break;
 80046e8:	e01b      	b.n	8004722 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ee:	617b      	str	r3, [r7, #20]
        break;
 80046f0:	e017      	b.n	8004722 <UART_SetConfig+0x30e>
 80046f2:	bf00      	nop
 80046f4:	efff69f3 	.word	0xefff69f3
 80046f8:	40008000 	.word	0x40008000
 80046fc:	40013800 	.word	0x40013800
 8004700:	40021000 	.word	0x40021000
 8004704:	40004400 	.word	0x40004400
 8004708:	40004800 	.word	0x40004800
 800470c:	40004c00 	.word	0x40004c00
 8004710:	40005000 	.word	0x40005000
 8004714:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	76bb      	strb	r3, [r7, #26]
        break;
 8004720:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 80f1 	beq.w	800490c <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	4613      	mov	r3, r2
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	4413      	add	r3, r2
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	429a      	cmp	r2, r3
 8004738:	d305      	bcc.n	8004746 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	429a      	cmp	r2, r3
 8004744:	d902      	bls.n	800474c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	76bb      	strb	r3, [r7, #26]
 800474a:	e0df      	b.n	800490c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	4619      	mov	r1, r3
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	f04f 0400 	mov.w	r4, #0
 800475c:	0214      	lsls	r4, r2, #8
 800475e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004762:	020b      	lsls	r3, r1, #8
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6852      	ldr	r2, [r2, #4]
 8004768:	0852      	lsrs	r2, r2, #1
 800476a:	4611      	mov	r1, r2
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	eb13 0b01 	adds.w	fp, r3, r1
 8004774:	eb44 0c02 	adc.w	ip, r4, r2
 8004778:	4658      	mov	r0, fp
 800477a:	4661      	mov	r1, ip
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f04f 0400 	mov.w	r4, #0
 8004784:	461a      	mov	r2, r3
 8004786:	4623      	mov	r3, r4
 8004788:	f7fb fd1e 	bl	80001c8 <__aeabi_uldivmod>
 800478c:	4603      	mov	r3, r0
 800478e:	460c      	mov	r4, r1
 8004790:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004798:	d308      	bcc.n	80047ac <UART_SetConfig+0x398>
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047a0:	d204      	bcs.n	80047ac <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	60da      	str	r2, [r3, #12]
 80047aa:	e0af      	b.n	800490c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	76bb      	strb	r3, [r7, #26]
 80047b0:	e0ac      	b.n	800490c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ba:	d15b      	bne.n	8004874 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80047bc:	7efb      	ldrb	r3, [r7, #27]
 80047be:	2b08      	cmp	r3, #8
 80047c0:	d827      	bhi.n	8004812 <UART_SetConfig+0x3fe>
 80047c2:	a201      	add	r2, pc, #4	; (adr r2, 80047c8 <UART_SetConfig+0x3b4>)
 80047c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c8:	080047ed 	.word	0x080047ed
 80047cc:	080047f5 	.word	0x080047f5
 80047d0:	080047fd 	.word	0x080047fd
 80047d4:	08004813 	.word	0x08004813
 80047d8:	08004803 	.word	0x08004803
 80047dc:	08004813 	.word	0x08004813
 80047e0:	08004813 	.word	0x08004813
 80047e4:	08004813 	.word	0x08004813
 80047e8:	0800480b 	.word	0x0800480b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047ec:	f7fd fe1c 	bl	8002428 <HAL_RCC_GetPCLK1Freq>
 80047f0:	6178      	str	r0, [r7, #20]
        break;
 80047f2:	e013      	b.n	800481c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047f4:	f7fd fe2e 	bl	8002454 <HAL_RCC_GetPCLK2Freq>
 80047f8:	6178      	str	r0, [r7, #20]
        break;
 80047fa:	e00f      	b.n	800481c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047fc:	4b49      	ldr	r3, [pc, #292]	; (8004924 <UART_SetConfig+0x510>)
 80047fe:	617b      	str	r3, [r7, #20]
        break;
 8004800:	e00c      	b.n	800481c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004802:	f7fd fd7b 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 8004806:	6178      	str	r0, [r7, #20]
        break;
 8004808:	e008      	b.n	800481c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800480a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800480e:	617b      	str	r3, [r7, #20]
        break;
 8004810:	e004      	b.n	800481c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004812:	2300      	movs	r3, #0
 8004814:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	76bb      	strb	r3, [r7, #26]
        break;
 800481a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d074      	beq.n	800490c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	005a      	lsls	r2, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	085b      	lsrs	r3, r3, #1
 800482c:	441a      	add	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	fbb2 f3f3 	udiv	r3, r2, r3
 8004836:	b29b      	uxth	r3, r3
 8004838:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	2b0f      	cmp	r3, #15
 800483e:	d916      	bls.n	800486e <UART_SetConfig+0x45a>
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004846:	d212      	bcs.n	800486e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	b29b      	uxth	r3, r3
 800484c:	f023 030f 	bic.w	r3, r3, #15
 8004850:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	085b      	lsrs	r3, r3, #1
 8004856:	b29b      	uxth	r3, r3
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	b29a      	uxth	r2, r3
 800485e:	89fb      	ldrh	r3, [r7, #14]
 8004860:	4313      	orrs	r3, r2
 8004862:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	89fa      	ldrh	r2, [r7, #14]
 800486a:	60da      	str	r2, [r3, #12]
 800486c:	e04e      	b.n	800490c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	76bb      	strb	r3, [r7, #26]
 8004872:	e04b      	b.n	800490c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004874:	7efb      	ldrb	r3, [r7, #27]
 8004876:	2b08      	cmp	r3, #8
 8004878:	d827      	bhi.n	80048ca <UART_SetConfig+0x4b6>
 800487a:	a201      	add	r2, pc, #4	; (adr r2, 8004880 <UART_SetConfig+0x46c>)
 800487c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004880:	080048a5 	.word	0x080048a5
 8004884:	080048ad 	.word	0x080048ad
 8004888:	080048b5 	.word	0x080048b5
 800488c:	080048cb 	.word	0x080048cb
 8004890:	080048bb 	.word	0x080048bb
 8004894:	080048cb 	.word	0x080048cb
 8004898:	080048cb 	.word	0x080048cb
 800489c:	080048cb 	.word	0x080048cb
 80048a0:	080048c3 	.word	0x080048c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048a4:	f7fd fdc0 	bl	8002428 <HAL_RCC_GetPCLK1Freq>
 80048a8:	6178      	str	r0, [r7, #20]
        break;
 80048aa:	e013      	b.n	80048d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048ac:	f7fd fdd2 	bl	8002454 <HAL_RCC_GetPCLK2Freq>
 80048b0:	6178      	str	r0, [r7, #20]
        break;
 80048b2:	e00f      	b.n	80048d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048b4:	4b1b      	ldr	r3, [pc, #108]	; (8004924 <UART_SetConfig+0x510>)
 80048b6:	617b      	str	r3, [r7, #20]
        break;
 80048b8:	e00c      	b.n	80048d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ba:	f7fd fd1f 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 80048be:	6178      	str	r0, [r7, #20]
        break;
 80048c0:	e008      	b.n	80048d4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048c6:	617b      	str	r3, [r7, #20]
        break;
 80048c8:	e004      	b.n	80048d4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	76bb      	strb	r3, [r7, #26]
        break;
 80048d2:	bf00      	nop
    }

    if (pclk != 0U)
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d018      	beq.n	800490c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	085a      	lsrs	r2, r3, #1
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	441a      	add	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	2b0f      	cmp	r3, #15
 80048f4:	d908      	bls.n	8004908 <UART_SetConfig+0x4f4>
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fc:	d204      	bcs.n	8004908 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	60da      	str	r2, [r3, #12]
 8004906:	e001      	b.n	800490c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004918:	7ebb      	ldrb	r3, [r7, #26]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3720      	adds	r7, #32
 800491e:	46bd      	mov	sp, r7
 8004920:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004924:	00f42400 	.word	0x00f42400

08004928 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00a      	beq.n	8004952 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00a      	beq.n	8004974 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	f003 0310 	and.w	r3, r3, #16
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d01a      	beq.n	8004a3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a26:	d10a      	bne.n	8004a3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	605a      	str	r2, [r3, #4]
  }
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004a7a:	f7fc fbfb 	bl	8001274 <HAL_GetTick>
 8004a7e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b08      	cmp	r3, #8
 8004a8c:	d10e      	bne.n	8004aac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a8e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f82a 	bl	8004af6 <UART_WaitOnFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e020      	b.n	8004aee <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d10e      	bne.n	8004ad8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f814 	bl	8004af6 <UART_WaitOnFlagUntilTimeout>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e00a      	b.n	8004aee <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b084      	sub	sp, #16
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	60f8      	str	r0, [r7, #12]
 8004afe:	60b9      	str	r1, [r7, #8]
 8004b00:	603b      	str	r3, [r7, #0]
 8004b02:	4613      	mov	r3, r2
 8004b04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b06:	e05d      	b.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0e:	d059      	beq.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b10:	f7fc fbb0 	bl	8001274 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d302      	bcc.n	8004b26 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d11b      	bne.n	8004b5e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b34:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0201 	bic.w	r2, r2, #1
 8004b44:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e042      	b.n	8004be4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d02b      	beq.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b7a:	d123      	bne.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b84:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b94:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0201 	bic.w	r2, r2, #1
 8004ba4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e00f      	b.n	8004be4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	69da      	ldr	r2, [r3, #28]
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	bf0c      	ite	eq
 8004bd4:	2301      	moveq	r3, #1
 8004bd6:	2300      	movne	r3, #0
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	461a      	mov	r2, r3
 8004bdc:	79fb      	ldrb	r3, [r7, #7]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d092      	beq.n	8004b08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <__libc_init_array>:
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	4e0d      	ldr	r6, [pc, #52]	; (8004c24 <__libc_init_array+0x38>)
 8004bf0:	4c0d      	ldr	r4, [pc, #52]	; (8004c28 <__libc_init_array+0x3c>)
 8004bf2:	1ba4      	subs	r4, r4, r6
 8004bf4:	10a4      	asrs	r4, r4, #2
 8004bf6:	2500      	movs	r5, #0
 8004bf8:	42a5      	cmp	r5, r4
 8004bfa:	d109      	bne.n	8004c10 <__libc_init_array+0x24>
 8004bfc:	4e0b      	ldr	r6, [pc, #44]	; (8004c2c <__libc_init_array+0x40>)
 8004bfe:	4c0c      	ldr	r4, [pc, #48]	; (8004c30 <__libc_init_array+0x44>)
 8004c00:	f000 f820 	bl	8004c44 <_init>
 8004c04:	1ba4      	subs	r4, r4, r6
 8004c06:	10a4      	asrs	r4, r4, #2
 8004c08:	2500      	movs	r5, #0
 8004c0a:	42a5      	cmp	r5, r4
 8004c0c:	d105      	bne.n	8004c1a <__libc_init_array+0x2e>
 8004c0e:	bd70      	pop	{r4, r5, r6, pc}
 8004c10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c14:	4798      	blx	r3
 8004c16:	3501      	adds	r5, #1
 8004c18:	e7ee      	b.n	8004bf8 <__libc_init_array+0xc>
 8004c1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c1e:	4798      	blx	r3
 8004c20:	3501      	adds	r5, #1
 8004c22:	e7f2      	b.n	8004c0a <__libc_init_array+0x1e>
 8004c24:	08004cac 	.word	0x08004cac
 8004c28:	08004cac 	.word	0x08004cac
 8004c2c:	08004cac 	.word	0x08004cac
 8004c30:	08004cb0 	.word	0x08004cb0

08004c34 <memset>:
 8004c34:	4402      	add	r2, r0
 8004c36:	4603      	mov	r3, r0
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d100      	bne.n	8004c3e <memset+0xa>
 8004c3c:	4770      	bx	lr
 8004c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c42:	e7f9      	b.n	8004c38 <memset+0x4>

08004c44 <_init>:
 8004c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c46:	bf00      	nop
 8004c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c4a:	bc08      	pop	{r3}
 8004c4c:	469e      	mov	lr, r3
 8004c4e:	4770      	bx	lr

08004c50 <_fini>:
 8004c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c52:	bf00      	nop
 8004c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c56:	bc08      	pop	{r3}
 8004c58:	469e      	mov	lr, r3
 8004c5a:	4770      	bx	lr
